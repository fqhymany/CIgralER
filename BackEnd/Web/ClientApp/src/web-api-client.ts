//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import followIfLoginRedirect from './components/api-authorization/followIfLoginRedirect';

export class Client {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    getApiFilesAccess(token: string): Promise<void> {
        let url_ = this.baseUrl + "/api/files/access/{token}";
        if (token === undefined || token === null)
            throw new Error("The parameter 'token' must be defined.");
        url_ = url_.replace("{token}", encodeURIComponent("" + token));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetApiFilesAccess(_response);
        });
    }

    protected processGetApiFilesAccess(response: Response): Promise<void> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }
}

export class AuthEndpointsClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    postApiAuthEndpointsLogin(command: LoginCommand): Promise<AuthResponseDto> {
        let url_ = this.baseUrl + "/api/AuthEndpoints/login";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPostApiAuthEndpointsLogin(_response);
        });
    }

    protected processPostApiAuthEndpointsLogin(response: Response): Promise<AuthResponseDto> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AuthResponseDto.fromJS(resultData200);
            return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result400 = resultData400 !== undefined ? resultData400 : <any>null;
    
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<AuthResponseDto>(null as any);
    }

    postApiAuthEndpointsRegister(command: RegisterCommand): Promise<AuthResponseDto> {
        let url_ = this.baseUrl + "/api/AuthEndpoints/register";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPostApiAuthEndpointsRegister(_response);
        });
    }

    protected processPostApiAuthEndpointsRegister(response: Response): Promise<AuthResponseDto> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AuthResponseDto.fromJS(resultData200);
            return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result400 = resultData400 !== undefined ? resultData400 : <any>null;
    
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<AuthResponseDto>(null as any);
    }

    postApiAuthEndpointsForgotPassword(command: ForgotPasswordCommand): Promise<string> {
        let url_ = this.baseUrl + "/api/AuthEndpoints/forgot-password";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPostApiAuthEndpointsForgotPassword(_response);
        });
    }

    protected processPostApiAuthEndpointsForgotPassword(response: Response): Promise<string> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result400 = resultData400 !== undefined ? resultData400 : <any>null;
    
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<string>(null as any);
    }

    postApiAuthEndpointsResetPassword(command: ResetPasswordCommand): Promise<void> {
        let url_ = this.baseUrl + "/api/AuthEndpoints/reset-password";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPostApiAuthEndpointsResetPassword(_response);
        });
    }

    protected processPostApiAuthEndpointsResetPassword(response: Response): Promise<void> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 204) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result400 = resultData400 !== undefined ? resultData400 : <any>null;
    
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    getApiAuthEndpointsRoles(): Promise<RoleDto[]> {
        let url_ = this.baseUrl + "/api/AuthEndpoints/roles";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetApiAuthEndpointsRoles(_response);
        });
    }

    protected processGetApiAuthEndpointsRoles(response: Response): Promise<RoleDto[]> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(RoleDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result400 = resultData400 !== undefined ? resultData400 : <any>null;
    
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<RoleDto[]>(null as any);
    }

    getApiAuthEndpointsProfile(): Promise<UserProfileDto> {
        let url_ = this.baseUrl + "/api/AuthEndpoints/profile";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetApiAuthEndpointsProfile(_response);
        });
    }

    protected processGetApiAuthEndpointsProfile(response: Response): Promise<UserProfileDto> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = UserProfileDto.fromJS(resultData200);
            return result200;
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            return throwException("A server side error occurred.", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<UserProfileDto>(null as any);
    }

    putApiAuthEndpointsUpdateProfile(id: string, authorization: string, command: UpdateProfileCommand): Promise<void> {
        let url_ = this.baseUrl + "/api/AuthEndpoints/updateProfile/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Authorization": authorization !== undefined && authorization !== null ? "" + authorization : "",
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPutApiAuthEndpointsUpdateProfile(_response);
        });
    }

    protected processPutApiAuthEndpointsUpdateProfile(response: Response): Promise<void> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 204) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result400 = resultData400 !== undefined ? resultData400 : <any>null;
    
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    putApiAuthEndpointsChangePassword(command: ChangePasswordCommand): Promise<void> {
        let url_ = this.baseUrl + "/api/AuthEndpoints/change-password";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPutApiAuthEndpointsChangePassword(_response);
        });
    }

    protected processPutApiAuthEndpointsChangePassword(response: Response): Promise<void> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 204) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result400 = resultData400 !== undefined ? resultData400 : <any>null;
    
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    postApiAuthEndpointsRefreshToken(command: RefreshTokenCommand): Promise<AuthResponseDto> {
        let url_ = this.baseUrl + "/api/AuthEndpoints/refresh-token";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPostApiAuthEndpointsRefreshToken(_response);
        });
    }

    protected processPostApiAuthEndpointsRefreshToken(response: Response): Promise<AuthResponseDto> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AuthResponseDto.fromJS(resultData200);
            return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result400 = resultData400 !== undefined ? resultData400 : <any>null;
    
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<AuthResponseDto>(null as any);
    }

    postApiAuthEndpointsLogout(command: LogoutCommand): Promise<void> {
        let url_ = this.baseUrl + "/api/AuthEndpoints/logout";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPostApiAuthEndpointsLogout(_response);
        });
    }

    protected processPostApiAuthEndpointsLogout(response: Response): Promise<void> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 204) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    postApiAuthEndpointsSelectRegion(command: SelectRegionCommand): Promise<AuthResponseDto> {
        let url_ = this.baseUrl + "/api/AuthEndpoints/select-region";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPostApiAuthEndpointsSelectRegion(_response);
        });
    }

    protected processPostApiAuthEndpointsSelectRegion(response: Response): Promise<AuthResponseDto> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AuthResponseDto.fromJS(resultData200);
            return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result400 = resultData400 !== undefined ? resultData400 : <any>null;
    
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<AuthResponseDto>(null as any);
    }

    postApiAuthEndpointsDeleteUsers(id: string): Promise<void> {
        let url_ = this.baseUrl + "/api/AuthEndpoints/deleteUsers/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPostApiAuthEndpointsDeleteUsers(_response);
        });
    }

    protected processPostApiAuthEndpointsDeleteUsers(response: Response): Promise<void> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 204) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result400 = resultData400 !== undefined ? resultData400 : <any>null;
    
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }
}

export class BasicInfoClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    getApiBasicInfoCaseType(): Promise<CaseTypeDto[]> {
        let url_ = this.baseUrl + "/api/BasicInfo/CaseType";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetApiBasicInfoCaseType(_response);
        });
    }

    protected processGetApiBasicInfoCaseType(response: Response): Promise<CaseTypeDto[]> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(CaseTypeDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            return throwException("A server side error occurred.", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CaseTypeDto[]>(null as any);
    }

    postApiBasicInfoCaseType(command: CreateCaseTypeCommand): Promise<void> {
        let url_ = this.baseUrl + "/api/BasicInfo/CaseType";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPostApiBasicInfoCaseType(_response);
        });
    }

    protected processPostApiBasicInfoCaseType(response: Response): Promise<void> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    getApiBasicInfoCaseTypeForManage(): Promise<CaseTypeDto[]> {
        let url_ = this.baseUrl + "/api/BasicInfo/CaseTypeForManage";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetApiBasicInfoCaseTypeForManage(_response);
        });
    }

    protected processGetApiBasicInfoCaseTypeForManage(response: Response): Promise<CaseTypeDto[]> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(CaseTypeDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            return throwException("A server side error occurred.", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CaseTypeDto[]>(null as any);
    }

    postApiBasicInfoCaseTypeUpdate(command: UpdateCaseTypeCommand): Promise<void> {
        let url_ = this.baseUrl + "/api/BasicInfo/CaseType/Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPostApiBasicInfoCaseTypeUpdate(_response);
        });
    }

    protected processPostApiBasicInfoCaseTypeUpdate(response: Response): Promise<void> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    postApiBasicInfoCaseTypeDelete(command: DeleteCaseTypeCommand): Promise<void> {
        let url_ = this.baseUrl + "/api/BasicInfo/CaseType/Delete";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPostApiBasicInfoCaseTypeDelete(_response);
        });
    }

    protected processPostApiBasicInfoCaseTypeDelete(response: Response): Promise<void> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    getApiBasicInfoCaseStatus(): Promise<CaseStatusDto[]> {
        let url_ = this.baseUrl + "/api/BasicInfo/CaseStatus";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetApiBasicInfoCaseStatus(_response);
        });
    }

    protected processGetApiBasicInfoCaseStatus(response: Response): Promise<CaseStatusDto[]> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(CaseStatusDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            return throwException("A server side error occurred.", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CaseStatusDto[]>(null as any);
    }

    postApiBasicInfoCaseStatus(command: CreateCaseStatusCommand): Promise<void> {
        let url_ = this.baseUrl + "/api/BasicInfo/CaseStatus";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPostApiBasicInfoCaseStatus(_response);
        });
    }

    protected processPostApiBasicInfoCaseStatus(response: Response): Promise<void> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    postApiBasicInfoCaseStatusUpdate(command: UpdateCaseStatusCommand): Promise<void> {
        let url_ = this.baseUrl + "/api/BasicInfo/CaseStatus/Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPostApiBasicInfoCaseStatusUpdate(_response);
        });
    }

    protected processPostApiBasicInfoCaseStatusUpdate(response: Response): Promise<void> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    postApiBasicInfoCaseStatusDelete(command: DeleteCaseStatusCommand): Promise<void> {
        let url_ = this.baseUrl + "/api/BasicInfo/CaseStatus/Delete";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPostApiBasicInfoCaseStatusDelete(_response);
        });
    }

    protected processPostApiBasicInfoCaseStatusDelete(response: Response): Promise<void> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    getApiBasicInfoCasePredefinedSubject(): Promise<PredefinedSubjectDto[]> {
        let url_ = this.baseUrl + "/api/BasicInfo/CasePredefinedSubject";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetApiBasicInfoCasePredefinedSubject(_response);
        });
    }

    protected processGetApiBasicInfoCasePredefinedSubject(response: Response): Promise<PredefinedSubjectDto[]> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(PredefinedSubjectDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            return throwException("A server side error occurred.", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<PredefinedSubjectDto[]>(null as any);
    }

    postApiBasicInfoCasePredefinedSubject(command: CreateCasePredefinedSubjectCommand): Promise<void> {
        let url_ = this.baseUrl + "/api/BasicInfo/CasePredefinedSubject";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPostApiBasicInfoCasePredefinedSubject(_response);
        });
    }

    protected processPostApiBasicInfoCasePredefinedSubject(response: Response): Promise<void> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    postApiBasicInfoCasePredefinedSubjectUpdate(command: UpdateCasePredefinedSubjectCommand): Promise<void> {
        let url_ = this.baseUrl + "/api/BasicInfo/CasePredefinedSubject/Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPostApiBasicInfoCasePredefinedSubjectUpdate(_response);
        });
    }

    protected processPostApiBasicInfoCasePredefinedSubjectUpdate(response: Response): Promise<void> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    postApiBasicInfoCasePredefinedSubjectDelete(command: DeleteCasePredefinedSubjectCommand): Promise<void> {
        let url_ = this.baseUrl + "/api/BasicInfo/CasePredefinedSubject/Delete";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPostApiBasicInfoCasePredefinedSubjectDelete(_response);
        });
    }

    protected processPostApiBasicInfoCasePredefinedSubjectDelete(response: Response): Promise<void> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    getApiBasicInfoClientRoleInCase(): Promise<ClientRoleInCaseDto[]> {
        let url_ = this.baseUrl + "/api/BasicInfo/ClientRoleInCase";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetApiBasicInfoClientRoleInCase(_response);
        });
    }

    protected processGetApiBasicInfoClientRoleInCase(response: Response): Promise<ClientRoleInCaseDto[]> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(ClientRoleInCaseDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            return throwException("A server side error occurred.", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ClientRoleInCaseDto[]>(null as any);
    }

    postApiBasicInfoClientRoleInCase(command: CreateClientRoleInCaseCommand): Promise<void> {
        let url_ = this.baseUrl + "/api/BasicInfo/ClientRoleInCase";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPostApiBasicInfoClientRoleInCase(_response);
        });
    }

    protected processPostApiBasicInfoClientRoleInCase(response: Response): Promise<void> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    postApiBasicInfoClientRoleInCaseUpdate(command: UpdateClientRoleInCaseCommand): Promise<void> {
        let url_ = this.baseUrl + "/api/BasicInfo/ClientRoleInCase/Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPostApiBasicInfoClientRoleInCaseUpdate(_response);
        });
    }

    protected processPostApiBasicInfoClientRoleInCaseUpdate(response: Response): Promise<void> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    postApiBasicInfoClientRoleInCaseDelete(command: DeleteClientRoleInCaseCommand): Promise<void> {
        let url_ = this.baseUrl + "/api/BasicInfo/ClientRoleInCase/Delete";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPostApiBasicInfoClientRoleInCaseDelete(_response);
        });
    }

    protected processPostApiBasicInfoClientRoleInCaseDelete(response: Response): Promise<void> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    getApiBasicInfoJudge(): Promise<JudgeDto[]> {
        let url_ = this.baseUrl + "/api/BasicInfo/Judge";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetApiBasicInfoJudge(_response);
        });
    }

    protected processGetApiBasicInfoJudge(response: Response): Promise<JudgeDto[]> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(JudgeDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            return throwException("A server side error occurred.", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<JudgeDto[]>(null as any);
    }

    postApiBasicInfoJudge(command: CreateJudgeCommand): Promise<void> {
        let url_ = this.baseUrl + "/api/BasicInfo/Judge";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPostApiBasicInfoJudge(_response);
        });
    }

    protected processPostApiBasicInfoJudge(response: Response): Promise<void> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    postApiBasicInfoJudgeUpdate(command: UpdateJudgeCommand): Promise<void> {
        let url_ = this.baseUrl + "/api/BasicInfo/Judge/Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPostApiBasicInfoJudgeUpdate(_response);
        });
    }

    protected processPostApiBasicInfoJudgeUpdate(response: Response): Promise<void> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    postApiBasicInfoJudgeDelete(command: DeleteJudgeCommand): Promise<void> {
        let url_ = this.baseUrl + "/api/BasicInfo/Judge/Delete";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPostApiBasicInfoJudgeDelete(_response);
        });
    }

    protected processPostApiBasicInfoJudgeDelete(response: Response): Promise<void> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    getApiBasicInfoCourtType(): Promise<CourtTypeDto[]> {
        let url_ = this.baseUrl + "/api/BasicInfo/CourtType";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetApiBasicInfoCourtType(_response);
        });
    }

    protected processGetApiBasicInfoCourtType(response: Response): Promise<CourtTypeDto[]> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(CourtTypeDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            return throwException("A server side error occurred.", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CourtTypeDto[]>(null as any);
    }

    postApiBasicInfoCourtType(command: CreateCourtTypeCommand): Promise<void> {
        let url_ = this.baseUrl + "/api/BasicInfo/CourtType";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPostApiBasicInfoCourtType(_response);
        });
    }

    protected processPostApiBasicInfoCourtType(response: Response): Promise<void> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    postApiBasicInfoCourtTypeUpdate(command: UpdateCourtTypeCommand): Promise<void> {
        let url_ = this.baseUrl + "/api/BasicInfo/CourtType/Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPostApiBasicInfoCourtTypeUpdate(_response);
        });
    }

    protected processPostApiBasicInfoCourtTypeUpdate(response: Response): Promise<void> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    postApiBasicInfoCourtTypeDelete(command: DeleteCourtTypeCommand): Promise<void> {
        let url_ = this.baseUrl + "/api/BasicInfo/CourtType/Delete";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPostApiBasicInfoCourtTypeDelete(_response);
        });
    }

    protected processPostApiBasicInfoCourtTypeDelete(response: Response): Promise<void> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    getApiBasicInfoCourtSubType(): Promise<CourtSubtypeDto[]> {
        let url_ = this.baseUrl + "/api/BasicInfo/CourtSubType";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetApiBasicInfoCourtSubType(_response);
        });
    }

    protected processGetApiBasicInfoCourtSubType(response: Response): Promise<CourtSubtypeDto[]> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(CourtSubtypeDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            return throwException("A server side error occurred.", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CourtSubtypeDto[]>(null as any);
    }

    postApiBasicInfoCourtSubType(command: CreateCourtSubTypeCommand): Promise<void> {
        let url_ = this.baseUrl + "/api/BasicInfo/CourtSubType";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPostApiBasicInfoCourtSubType(_response);
        });
    }

    protected processPostApiBasicInfoCourtSubType(response: Response): Promise<void> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    postApiBasicInfoCourtSubTypeUpdate(command: UpdateCourtSubTypeCommand): Promise<void> {
        let url_ = this.baseUrl + "/api/BasicInfo/CourtSubType/Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPostApiBasicInfoCourtSubTypeUpdate(_response);
        });
    }

    protected processPostApiBasicInfoCourtSubTypeUpdate(response: Response): Promise<void> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    postApiBasicInfoCourtSubTypeDelete(command: DeleteCourtSubTypeCommand): Promise<void> {
        let url_ = this.baseUrl + "/api/BasicInfo/CourtSubType/Delete";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPostApiBasicInfoCourtSubTypeDelete(_response);
        });
    }

    protected processPostApiBasicInfoCourtSubTypeDelete(response: Response): Promise<void> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }
}

export class CaseFinancialClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    getApiCaseFinancialOverview(): Promise<CaseFinancialStatusDto[]> {
        let url_ = this.baseUrl + "/api/CaseFinancial/Overview";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetApiCaseFinancialOverview(_response);
        });
    }

    protected processGetApiCaseFinancialOverview(response: Response): Promise<CaseFinancialStatusDto[]> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(CaseFinancialStatusDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CaseFinancialStatusDto[]>(null as any);
    }

    postApiCaseFinancialCreateServices(command: CreateCaseServiceCommand): Promise<number> {
        let url_ = this.baseUrl + "/api/CaseFinancial/CreateServices";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPostApiCaseFinancialCreateServices(_response);
        });
    }

    protected processPostApiCaseFinancialCreateServices(response: Response): Promise<number> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 201) {
            return response.text().then((_responseText) => {
            let result201: any = null;
            let resultData201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result201 = resultData201 !== undefined ? resultData201 : <any>null;
    
            return result201;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<number>(null as any);
    }

    postApiCaseFinancialUpdateServices(command: UpdateCaseServiceCommand): Promise<void> {
        let url_ = this.baseUrl + "/api/CaseFinancial/UpdateServices";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPostApiCaseFinancialUpdateServices(_response);
        });
    }

    protected processPostApiCaseFinancialUpdateServices(response: Response): Promise<void> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    postApiCaseFinancialDeleteServices(command: DeleteCaseServiceCommand): Promise<void> {
        let url_ = this.baseUrl + "/api/CaseFinancial/DeleteServices";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPostApiCaseFinancialDeleteServices(_response);
        });
    }

    protected processPostApiCaseFinancialDeleteServices(response: Response): Promise<void> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    getApiCaseFinancialGetServicesByCaseId(caseId: number): Promise<CaseServiceVm> {
        let url_ = this.baseUrl + "/api/CaseFinancial/GetServicesByCaseId?";
        if (caseId === undefined || caseId === null)
            throw new Error("The parameter 'caseId' must be defined and cannot be null.");
        else
            url_ += "CaseId=" + encodeURIComponent("" + caseId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetApiCaseFinancialGetServicesByCaseId(_response);
        });
    }

    protected processGetApiCaseFinancialGetServicesByCaseId(response: Response): Promise<CaseServiceVm> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CaseServiceVm.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CaseServiceVm>(null as any);
    }

    getApiCaseFinancialGetServiceById(id: number): Promise<CaseServiceDto> {
        let url_ = this.baseUrl + "/api/CaseFinancial/GetServiceById?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined and cannot be null.");
        else
            url_ += "Id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetApiCaseFinancialGetServiceById(_response);
        });
    }

    protected processGetApiCaseFinancialGetServiceById(response: Response): Promise<CaseServiceDto> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CaseServiceDto.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CaseServiceDto>(null as any);
    }

    getApiCaseFinancialInitialDataServices(): Promise<InitialCaseServicesRegDataVM> {
        let url_ = this.baseUrl + "/api/CaseFinancial/InitialDataServices";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetApiCaseFinancialInitialDataServices(_response);
        });
    }

    protected processGetApiCaseFinancialInitialDataServices(response: Response): Promise<InitialCaseServicesRegDataVM> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = InitialCaseServicesRegDataVM.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<InitialCaseServicesRegDataVM>(null as any);
    }

    postApiCaseFinancialCreatePayAgrees(command: CreateCasePaymentAgreementCommand): Promise<number> {
        let url_ = this.baseUrl + "/api/CaseFinancial/CreatePayAgrees";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPostApiCaseFinancialCreatePayAgrees(_response);
        });
    }

    protected processPostApiCaseFinancialCreatePayAgrees(response: Response): Promise<number> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 201) {
            return response.text().then((_responseText) => {
            let result201: any = null;
            let resultData201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result201 = resultData201 !== undefined ? resultData201 : <any>null;
    
            return result201;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<number>(null as any);
    }

    postApiCaseFinancialUpdatePayAgrees(command: UpdateCasePaymentAgreementCommand): Promise<void> {
        let url_ = this.baseUrl + "/api/CaseFinancial/UpdatePayAgrees";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPostApiCaseFinancialUpdatePayAgrees(_response);
        });
    }

    protected processPostApiCaseFinancialUpdatePayAgrees(response: Response): Promise<void> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    postApiCaseFinancialDeletePayAgrees(command: DeleteCasePaymentAgreementCommand): Promise<void> {
        let url_ = this.baseUrl + "/api/CaseFinancial/DeletePayAgrees";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPostApiCaseFinancialDeletePayAgrees(_response);
        });
    }

    protected processPostApiCaseFinancialDeletePayAgrees(response: Response): Promise<void> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    getApiCaseFinancialGetPayAgreesByCaseId(caseId: number): Promise<CasePayAgreeVm> {
        let url_ = this.baseUrl + "/api/CaseFinancial/GetPayAgreesByCaseId?";
        if (caseId === undefined || caseId === null)
            throw new Error("The parameter 'caseId' must be defined and cannot be null.");
        else
            url_ += "CaseId=" + encodeURIComponent("" + caseId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetApiCaseFinancialGetPayAgreesByCaseId(_response);
        });
    }

    protected processGetApiCaseFinancialGetPayAgreesByCaseId(response: Response): Promise<CasePayAgreeVm> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CasePayAgreeVm.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CasePayAgreeVm>(null as any);
    }

    getApiCaseFinancialGetPayAgreeById(id: number): Promise<CasePayAgreeDto> {
        let url_ = this.baseUrl + "/api/CaseFinancial/GetPayAgreeById?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined and cannot be null.");
        else
            url_ += "Id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetApiCaseFinancialGetPayAgreeById(_response);
        });
    }

    protected processGetApiCaseFinancialGetPayAgreeById(response: Response): Promise<CasePayAgreeDto> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CasePayAgreeDto.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CasePayAgreeDto>(null as any);
    }

    getApiCaseFinancialInitialDataPayAgrees(caseId: number): Promise<InitialCasePayAgreesRegDataVM> {
        let url_ = this.baseUrl + "/api/CaseFinancial/InitialDataPayAgrees?";
        if (caseId === undefined || caseId === null)
            throw new Error("The parameter 'caseId' must be defined and cannot be null.");
        else
            url_ += "CaseId=" + encodeURIComponent("" + caseId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetApiCaseFinancialInitialDataPayAgrees(_response);
        });
    }

    protected processGetApiCaseFinancialInitialDataPayAgrees(response: Response): Promise<InitialCasePayAgreesRegDataVM> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = InitialCasePayAgreesRegDataVM.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<InitialCasePayAgreesRegDataVM>(null as any);
    }

    postApiCaseFinancialCreatePayTnxs(command: CreateCasePaymentTransactionCommand): Promise<number> {
        let url_ = this.baseUrl + "/api/CaseFinancial/CreatePayTnxs";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPostApiCaseFinancialCreatePayTnxs(_response);
        });
    }

    protected processPostApiCaseFinancialCreatePayTnxs(response: Response): Promise<number> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 201) {
            return response.text().then((_responseText) => {
            let result201: any = null;
            let resultData201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result201 = resultData201 !== undefined ? resultData201 : <any>null;
    
            return result201;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<number>(null as any);
    }

    postApiCaseFinancialUpdatePayTnxs(command: UpdateCasePaymentTransactionCommand): Promise<void> {
        let url_ = this.baseUrl + "/api/CaseFinancial/UpdatePayTnxs";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPostApiCaseFinancialUpdatePayTnxs(_response);
        });
    }

    protected processPostApiCaseFinancialUpdatePayTnxs(response: Response): Promise<void> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    postApiCaseFinancialDeletePayTnxs(command: DeleteCasePaymentTransactionCommand): Promise<void> {
        let url_ = this.baseUrl + "/api/CaseFinancial/DeletePayTnxs";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPostApiCaseFinancialDeletePayTnxs(_response);
        });
    }

    protected processPostApiCaseFinancialDeletePayTnxs(response: Response): Promise<void> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    getApiCaseFinancialGetPayTnxsByCaseId(caseId: number): Promise<CasePayTransactionsVm> {
        let url_ = this.baseUrl + "/api/CaseFinancial/GetPayTnxsByCaseId?";
        if (caseId === undefined || caseId === null)
            throw new Error("The parameter 'caseId' must be defined and cannot be null.");
        else
            url_ += "CaseId=" + encodeURIComponent("" + caseId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetApiCaseFinancialGetPayTnxsByCaseId(_response);
        });
    }

    protected processGetApiCaseFinancialGetPayTnxsByCaseId(response: Response): Promise<CasePayTransactionsVm> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CasePayTransactionsVm.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CasePayTransactionsVm>(null as any);
    }

    getApiCaseFinancialGetPayTnxsById(id: number): Promise<CasePayTnxDto> {
        let url_ = this.baseUrl + "/api/CaseFinancial/GetPayTnxsById?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined and cannot be null.");
        else
            url_ += "Id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetApiCaseFinancialGetPayTnxsById(_response);
        });
    }

    protected processGetApiCaseFinancialGetPayTnxsById(response: Response): Promise<CasePayTnxDto> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CasePayTnxDto.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CasePayTnxDto>(null as any);
    }

    getApiCaseFinancialInitialDataPayTnxs(caseId: number): Promise<InitialCasePayTnxsRegDataVM> {
        let url_ = this.baseUrl + "/api/CaseFinancial/InitialDataPayTnxs?";
        if (caseId === undefined || caseId === null)
            throw new Error("The parameter 'caseId' must be defined and cannot be null.");
        else
            url_ += "CaseId=" + encodeURIComponent("" + caseId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetApiCaseFinancialInitialDataPayTnxs(_response);
        });
    }

    protected processGetApiCaseFinancialInitialDataPayTnxs(response: Response): Promise<InitialCasePayTnxsRegDataVM> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = InitialCasePayTnxsRegDataVM.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<InitialCasePayTnxsRegDataVM>(null as any);
    }
}

export class CasesClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    getApiCasesInitialdata(): Promise<InitialCaseRegistrationDataVM> {
        let url_ = this.baseUrl + "/api/Cases/initialdata";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetApiCasesInitialdata(_response);
        });
    }

    protected processGetApiCasesInitialdata(response: Response): Promise<InitialCaseRegistrationDataVM> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = InitialCaseRegistrationDataVM.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<InitialCaseRegistrationDataVM>(null as any);
    }

    getApiCasesAll(): Promise<CasesVm> {
        let url_ = this.baseUrl + "/api/Cases/all";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetApiCasesAll(_response);
        });
    }

    protected processGetApiCasesAll(response: Response): Promise<CasesVm> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CasesVm.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CasesVm>(null as any);
    }

    getApiCasesGetCaseById(id: number): Promise<CaseDto> {
        let url_ = this.baseUrl + "/api/Cases/GetCaseById?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined and cannot be null.");
        else
            url_ += "Id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetApiCasesGetCaseById(_response);
        });
    }

    protected processGetApiCasesGetCaseById(response: Response): Promise<CaseDto> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CaseDto.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CaseDto>(null as any);
    }

    postApiCasesCreate(command: CreateCaseCommand): Promise<number> {
        let url_ = this.baseUrl + "/api/Cases/create";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPostApiCasesCreate(_response);
        });
    }

    protected processPostApiCasesCreate(response: Response): Promise<number> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 201) {
            return response.text().then((_responseText) => {
            let result201: any = null;
            let resultData201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result201 = resultData201 !== undefined ? resultData201 : <any>null;
    
            return result201;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<number>(null as any);
    }

    postApiCasesUpdate(command: UpdateCaseCommand): Promise<void> {
        let url_ = this.baseUrl + "/api/Cases/update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPostApiCasesUpdate(_response);
        });
    }

    protected processPostApiCasesUpdate(response: Response): Promise<void> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    postApiCasesDelete(command: DeleteCaseCommand): Promise<void> {
        let url_ = this.baseUrl + "/api/Cases/delete";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPostApiCasesDelete(_response);
        });
    }

    protected processPostApiCasesDelete(response: Response): Promise<void> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    postApiCasesUploadfile(file: FileParameter | null | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/Cases/uploadfile";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = new FormData();
        if (file !== null && file !== undefined)
            content_.append("file", file.data, file.fileName ? file.fileName : "file");

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPostApiCasesUploadfile(_response);
        });
    }

    protected processPostApiCasesUploadfile(response: Response): Promise<void> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }
}

export class ClientEndpointsClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    getApiClientEndpointsClients(): Promise<void> {
        let url_ = this.baseUrl + "/api/ClientEndpoints/Clients";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetApiClientEndpointsClients(_response);
        });
    }

    protected processGetApiClientEndpointsClients(response: Response): Promise<void> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    getApiClientEndpointsGetClientCasesByClientId(clientId: string | null): Promise<ClientCaseVm> {
        let url_ = this.baseUrl + "/api/ClientEndpoints/GetClientCasesByClientId?";
        if (clientId === undefined)
            throw new Error("The parameter 'clientId' must be defined.");
        else if(clientId !== null)
            url_ += "ClientId=" + encodeURIComponent("" + clientId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetApiClientEndpointsGetClientCasesByClientId(_response);
        });
    }

    protected processGetApiClientEndpointsGetClientCasesByClientId(response: Response): Promise<ClientCaseVm> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ClientCaseVm.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ClientCaseVm>(null as any);
    }

    getClientById(id: string): Promise<void> {
        let url_ = this.baseUrl + "/api/ClientEndpoints/Clients/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetClientById(_response);
        });
    }

    protected processGetClientById(response: Response): Promise<void> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    updateClient(id: string, command: UpdateClientCommand): Promise<void> {
        let url_ = this.baseUrl + "/api/ClientEndpoints/Clients/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdateClient(_response);
        });
    }

    protected processUpdateClient(response: Response): Promise<void> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }
}

export class FcmEndPointsClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    postApiFcmEndPointsSetFcmToken(command: SetFcmTokenCommand): Promise<string> {
        let url_ = this.baseUrl + "/api/FcmEndPoints/SetFcmToken";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPostApiFcmEndPointsSetFcmToken(_response);
        });
    }

    protected processPostApiFcmEndPointsSetFcmToken(response: Response): Promise<string> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result400 = resultData400 !== undefined ? resultData400 : <any>null;
    
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<string>(null as any);
    }
}

export class FileEndpointsClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    postApiFileEndpointsUpload(caseId: string, area: string, customName: string, file: FileParameter | null | undefined): Promise<FileDto> {
        let url_ = this.baseUrl + "/api/FileEndpoints/upload?";
        if (caseId === undefined || caseId === null)
            throw new Error("The parameter 'caseId' must be defined and cannot be null.");
        else
            url_ += "caseId=" + encodeURIComponent("" + caseId) + "&";
        if (area === undefined || area === null)
            throw new Error("The parameter 'area' must be defined and cannot be null.");
        else
            url_ += "area=" + encodeURIComponent("" + area) + "&";
        if (customName === undefined || customName === null)
            throw new Error("The parameter 'customName' must be defined and cannot be null.");
        else
            url_ += "customName=" + encodeURIComponent("" + customName) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = new FormData();
        if (file !== null && file !== undefined)
            content_.append("file", file.data, file.fileName ? file.fileName : "file");

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPostApiFileEndpointsUpload(_response);
        });
    }

    protected processPostApiFileEndpointsUpload(response: Response): Promise<FileDto> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = FileDto.fromJS(resultData200);
            return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result400 = resultData400 !== undefined ? resultData400 : <any>null;
    
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FileDto>(null as any);
    }

    getApiFileEndpointsDownload(fileId: string): Promise<void> {
        let url_ = this.baseUrl + "/api/FileEndpoints/download/{fileId}";
        if (fileId === undefined || fileId === null)
            throw new Error("The parameter 'fileId' must be defined.");
        url_ = url_.replace("{fileId}", encodeURIComponent("" + fileId));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetApiFileEndpointsDownload(_response);
        });
    }

    protected processGetApiFileEndpointsDownload(response: Response): Promise<void> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    getApiFileEndpointsImage(fileId: string): Promise<void> {
        let url_ = this.baseUrl + "/api/FileEndpoints/image/{fileId}";
        if (fileId === undefined || fileId === null)
            throw new Error("The parameter 'fileId' must be defined.");
        url_ = url_.replace("{fileId}", encodeURIComponent("" + fileId));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetApiFileEndpointsImage(_response);
        });
    }

    protected processGetApiFileEndpointsImage(response: Response): Promise<void> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    getApiFileEndpointsSecureAccess(fileId: string, expirationMinutes: number | undefined): Promise<FileAccessTokenResult> {
        let url_ = this.baseUrl + "/api/FileEndpoints/secure-access/{fileId}?";
        if (fileId === undefined || fileId === null)
            throw new Error("The parameter 'fileId' must be defined.");
        url_ = url_.replace("{fileId}", encodeURIComponent("" + fileId));
        if (expirationMinutes === null)
            throw new Error("The parameter 'expirationMinutes' cannot be null.");
        else if (expirationMinutes !== undefined)
            url_ += "expirationMinutes=" + encodeURIComponent("" + expirationMinutes) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetApiFileEndpointsSecureAccess(_response);
        });
    }

    protected processGetApiFileEndpointsSecureAccess(response: Response): Promise<FileAccessTokenResult> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = FileAccessTokenResult.fromJS(resultData200);
            return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result400 = resultData400 !== undefined ? resultData400 : <any>null;
    
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FileAccessTokenResult>(null as any);
    }

    getApiFileEndpointsCaseFiles(caseId: string, area: string): Promise<FileDto[]> {
        let url_ = this.baseUrl + "/api/FileEndpoints/case-files/{caseId}?";
        if (caseId === undefined || caseId === null)
            throw new Error("The parameter 'caseId' must be defined.");
        url_ = url_.replace("{caseId}", encodeURIComponent("" + caseId));
        if (area === undefined || area === null)
            throw new Error("The parameter 'area' must be defined and cannot be null.");
        else
            url_ += "area=" + encodeURIComponent("" + area) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetApiFileEndpointsCaseFiles(_response);
        });
    }

    protected processGetApiFileEndpointsCaseFiles(response: Response): Promise<FileDto[]> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(FileDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result400 = resultData400 !== undefined ? resultData400 : <any>null;
    
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FileDto[]>(null as any);
    }

    deleteApiFileEndpoints(fileId: string): Promise<boolean> {
        let url_ = this.baseUrl + "/api/FileEndpoints/{fileId}";
        if (fileId === undefined || fileId === null)
            throw new Error("The parameter 'fileId' must be defined.");
        url_ = url_.replace("{fileId}", encodeURIComponent("" + fileId));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDeleteApiFileEndpoints(_response);
        });
    }

    protected processDeleteApiFileEndpoints(response: Response): Promise<boolean> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result400 = resultData400 !== undefined ? resultData400 : <any>null;
    
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<boolean>(null as any);
    }
}

export class JudicialClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    postApiJudicialCreateJudicialDeadline(command: CreateJudicialDeadlineCommand): Promise<number> {
        let url_ = this.baseUrl + "/api/Judicial/CreateJudicialDeadline";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPostApiJudicialCreateJudicialDeadline(_response);
        });
    }

    protected processPostApiJudicialCreateJudicialDeadline(response: Response): Promise<number> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 201) {
            return response.text().then((_responseText) => {
            let result201: any = null;
            let resultData201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result201 = resultData201 !== undefined ? resultData201 : <any>null;
    
            return result201;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<number>(null as any);
    }

    postApiJudicialUpdateJudicialDeadline(command: UpdateJudicialDeadlineCommand): Promise<void> {
        let url_ = this.baseUrl + "/api/Judicial/UpdateJudicialDeadline";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPostApiJudicialUpdateJudicialDeadline(_response);
        });
    }

    protected processPostApiJudicialUpdateJudicialDeadline(response: Response): Promise<void> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    postApiJudicialDeleteJudicialDeadline(command: DeleteJudicialDeadlineCommand): Promise<void> {
        let url_ = this.baseUrl + "/api/Judicial/DeleteJudicialDeadline";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPostApiJudicialDeleteJudicialDeadline(_response);
        });
    }

    protected processPostApiJudicialDeleteJudicialDeadline(response: Response): Promise<void> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    getApiJudicialGetJudicialDeadlineByCaseId(caseId: number): Promise<JudicialDeadlineVm> {
        let url_ = this.baseUrl + "/api/Judicial/GetJudicialDeadlineByCaseId?";
        if (caseId === undefined || caseId === null)
            throw new Error("The parameter 'caseId' must be defined and cannot be null.");
        else
            url_ += "CaseId=" + encodeURIComponent("" + caseId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetApiJudicialGetJudicialDeadlineByCaseId(_response);
        });
    }

    protected processGetApiJudicialGetJudicialDeadlineByCaseId(response: Response): Promise<JudicialDeadlineVm> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = JudicialDeadlineVm.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<JudicialDeadlineVm>(null as any);
    }

    getApiJudicialAllJudicialDeadline(): Promise<JudicialDeadlineWithCaseNoVm> {
        let url_ = this.baseUrl + "/api/Judicial/AllJudicialDeadline";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetApiJudicialAllJudicialDeadline(_response);
        });
    }

    protected processGetApiJudicialAllJudicialDeadline(response: Response): Promise<JudicialDeadlineWithCaseNoVm> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = JudicialDeadlineWithCaseNoVm.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<JudicialDeadlineWithCaseNoVm>(null as any);
    }

    postApiJudicialCreateJudicialDecision(command: CreateJudicialDecisionCommand): Promise<number> {
        let url_ = this.baseUrl + "/api/Judicial/CreateJudicialDecision";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPostApiJudicialCreateJudicialDecision(_response);
        });
    }

    protected processPostApiJudicialCreateJudicialDecision(response: Response): Promise<number> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 201) {
            return response.text().then((_responseText) => {
            let result201: any = null;
            let resultData201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result201 = resultData201 !== undefined ? resultData201 : <any>null;
    
            return result201;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<number>(null as any);
    }

    postApiJudicialUpdateJudicialDecision(command: UpdateJudicialDecisionCommand): Promise<void> {
        let url_ = this.baseUrl + "/api/Judicial/UpdateJudicialDecision";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPostApiJudicialUpdateJudicialDecision(_response);
        });
    }

    protected processPostApiJudicialUpdateJudicialDecision(response: Response): Promise<void> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    postApiJudicialDeleteJudicialDecision(command: DeleteJudicialDecisionCommand): Promise<void> {
        let url_ = this.baseUrl + "/api/Judicial/DeleteJudicialDecision";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPostApiJudicialDeleteJudicialDecision(_response);
        });
    }

    protected processPostApiJudicialDeleteJudicialDecision(response: Response): Promise<void> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    getApiJudicialGetJudicialDecisionByCaseId(caseId: number): Promise<JudicialDecisionVm> {
        let url_ = this.baseUrl + "/api/Judicial/GetJudicialDecisionByCaseId?";
        if (caseId === undefined || caseId === null)
            throw new Error("The parameter 'caseId' must be defined and cannot be null.");
        else
            url_ += "CaseId=" + encodeURIComponent("" + caseId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetApiJudicialGetJudicialDecisionByCaseId(_response);
        });
    }

    protected processGetApiJudicialGetJudicialDecisionByCaseId(response: Response): Promise<JudicialDecisionVm> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = JudicialDecisionVm.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<JudicialDecisionVm>(null as any);
    }

    postApiJudicialCreateJudicialNotice(command: CreateJudicialNoticeCommand): Promise<number> {
        let url_ = this.baseUrl + "/api/Judicial/CreateJudicialNotice";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPostApiJudicialCreateJudicialNotice(_response);
        });
    }

    protected processPostApiJudicialCreateJudicialNotice(response: Response): Promise<number> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 201) {
            return response.text().then((_responseText) => {
            let result201: any = null;
            let resultData201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result201 = resultData201 !== undefined ? resultData201 : <any>null;
    
            return result201;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<number>(null as any);
    }

    postApiJudicialUpdateJudicialNotice(command: UpdateJudicialNoticeCommand): Promise<void> {
        let url_ = this.baseUrl + "/api/Judicial/UpdateJudicialNotice";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPostApiJudicialUpdateJudicialNotice(_response);
        });
    }

    protected processPostApiJudicialUpdateJudicialNotice(response: Response): Promise<void> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    postApiJudicialDeleteJudicialNotice(command: DeleteJudicialNoticeCommand): Promise<void> {
        let url_ = this.baseUrl + "/api/Judicial/DeleteJudicialNotice";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPostApiJudicialDeleteJudicialNotice(_response);
        });
    }

    protected processPostApiJudicialDeleteJudicialNotice(response: Response): Promise<void> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    getApiJudicialGetJudicialNoticeByCaseId(caseId: number): Promise<JudicialNoticeVm> {
        let url_ = this.baseUrl + "/api/Judicial/GetJudicialNoticeByCaseId?";
        if (caseId === undefined || caseId === null)
            throw new Error("The parameter 'caseId' must be defined and cannot be null.");
        else
            url_ += "CaseId=" + encodeURIComponent("" + caseId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetApiJudicialGetJudicialNoticeByCaseId(_response);
        });
    }

    protected processGetApiJudicialGetJudicialNoticeByCaseId(response: Response): Promise<JudicialNoticeVm> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = JudicialNoticeVm.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<JudicialNoticeVm>(null as any);
    }

    postApiJudicialCreateJudicialAction(command: CreateJudicialActionCommand): Promise<number> {
        let url_ = this.baseUrl + "/api/Judicial/CreateJudicialAction";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPostApiJudicialCreateJudicialAction(_response);
        });
    }

    protected processPostApiJudicialCreateJudicialAction(response: Response): Promise<number> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 201) {
            return response.text().then((_responseText) => {
            let result201: any = null;
            let resultData201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result201 = resultData201 !== undefined ? resultData201 : <any>null;
    
            return result201;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<number>(null as any);
    }

    postApiJudicialUpdateJudicialAction(command: UpdateJudicialActionCommand): Promise<void> {
        let url_ = this.baseUrl + "/api/Judicial/UpdateJudicialAction";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPostApiJudicialUpdateJudicialAction(_response);
        });
    }

    protected processPostApiJudicialUpdateJudicialAction(response: Response): Promise<void> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    postApiJudicialDeleteJudicialAction(command: DeleteJudicialActionCommand): Promise<void> {
        let url_ = this.baseUrl + "/api/Judicial/DeleteJudicialAction";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPostApiJudicialDeleteJudicialAction(_response);
        });
    }

    protected processPostApiJudicialDeleteJudicialAction(response: Response): Promise<void> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    getApiJudicialGetJudicialActionByCaseId(caseId: number): Promise<JudicialActionVm> {
        let url_ = this.baseUrl + "/api/Judicial/GetJudicialActionByCaseId?";
        if (caseId === undefined || caseId === null)
            throw new Error("The parameter 'caseId' must be defined and cannot be null.");
        else
            url_ += "CaseId=" + encodeURIComponent("" + caseId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetApiJudicialGetJudicialActionByCaseId(_response);
        });
    }

    protected processGetApiJudicialGetJudicialActionByCaseId(response: Response): Promise<JudicialActionVm> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = JudicialActionVm.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<JudicialActionVm>(null as any);
    }
}

export class NotificationEndpointsClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    registerDevice(request: DeviceRegistrationDto): Promise<void> {
        let url_ = this.baseUrl + "/api/NotificationEndpoints/register-device";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processRegisterDevice(_response);
        });
    }

    protected processRegisterDevice(response: Response): Promise<void> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    updateDeviceToken(deviceToken: string): Promise<void> {
        let url_ = this.baseUrl + "/api/NotificationEndpoints/update-token";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(deviceToken);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdateDeviceToken(_response);
        });
    }

    protected processUpdateDeviceToken(response: Response): Promise<void> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    sendNotification(request: SendNotificationRequest): Promise<void> {
        let url_ = this.baseUrl + "/api/NotificationEndpoints/send";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSendNotification(_response);
        });
    }

    protected processSendNotification(response: Response): Promise<void> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    getUserDevices(userId: string): Promise<void> {
        let url_ = this.baseUrl + "/api/NotificationEndpoints/user-devices/{userId}";
        if (userId === undefined || userId === null)
            throw new Error("The parameter 'userId' must be defined.");
        url_ = url_.replace("{userId}", encodeURIComponent("" + userId));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetUserDevices(_response);
        });
    }

    protected processGetUserDevices(response: Response): Promise<void> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }
}

export class PreferenceClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    getApiPreferenceGetUserPreferencesByKey(key: string | null): Promise<string> {
        let url_ = this.baseUrl + "/api/Preference/GetUserPreferencesByKey?";
        if (key === undefined)
            throw new Error("The parameter 'key' must be defined.");
        else if(key !== null)
            url_ += "Key=" + encodeURIComponent("" + key) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetApiPreferenceGetUserPreferencesByKey(_response);
        });
    }

    protected processGetApiPreferenceGetUserPreferencesByKey(response: Response): Promise<string> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<string>(null as any);
    }

    postApiPreferenceUpdateUserPreference(command: UpdateUserPreferenceCommand): Promise<void> {
        let url_ = this.baseUrl + "/api/Preference/UpdateUserPreference";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPostApiPreferenceUpdateUserPreference(_response);
        });
    }

    protected processPostApiPreferenceUpdateUserPreference(response: Response): Promise<void> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }
}

export class TodoItemsClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    getTodoItemsWithPagination(listId: number, pageNumber: number, pageSize: number): Promise<PaginatedListOfTodoItemBriefDto> {
        let url_ = this.baseUrl + "/api/TodoItems?";
        if (listId === undefined || listId === null)
            throw new Error("The parameter 'listId' must be defined and cannot be null.");
        else
            url_ += "ListId=" + encodeURIComponent("" + listId) + "&";
        if (pageNumber === undefined || pageNumber === null)
            throw new Error("The parameter 'pageNumber' must be defined and cannot be null.");
        else
            url_ += "PageNumber=" + encodeURIComponent("" + pageNumber) + "&";
        if (pageSize === undefined || pageSize === null)
            throw new Error("The parameter 'pageSize' must be defined and cannot be null.");
        else
            url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetTodoItemsWithPagination(_response);
        });
    }

    protected processGetTodoItemsWithPagination(response: Response): Promise<PaginatedListOfTodoItemBriefDto> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PaginatedListOfTodoItemBriefDto.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<PaginatedListOfTodoItemBriefDto>(null as any);
    }

    createTodoItem(command: CreateTodoItemCommand): Promise<number> {
        let url_ = this.baseUrl + "/api/TodoItems";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCreateTodoItem(_response);
        });
    }

    protected processCreateTodoItem(response: Response): Promise<number> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 201) {
            return response.text().then((_responseText) => {
            let result201: any = null;
            let resultData201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result201 = resultData201 !== undefined ? resultData201 : <any>null;
    
            return result201;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<number>(null as any);
    }

    updateTodoItem(id: number, command: UpdateTodoItemCommand): Promise<void> {
        let url_ = this.baseUrl + "/api/TodoItems/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdateTodoItem(_response);
        });
    }

    protected processUpdateTodoItem(response: Response): Promise<void> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 204) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            return throwException("A server side error occurred.", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    deleteTodoItem(id: number): Promise<void> {
        let url_ = this.baseUrl + "/api/TodoItems/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDeleteTodoItem(_response);
        });
    }

    protected processDeleteTodoItem(response: Response): Promise<void> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 204) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    updateTodoItemDetail(id: number, command: UpdateTodoItemDetailCommand): Promise<void> {
        let url_ = this.baseUrl + "/api/TodoItems/UpdateDetail/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdateTodoItemDetail(_response);
        });
    }

    protected processUpdateTodoItemDetail(response: Response): Promise<void> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 204) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            return throwException("A server side error occurred.", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }
}

export class TodoListsClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    getTodoLists(): Promise<TodosVm> {
        let url_ = this.baseUrl + "/api/TodoLists";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetTodoLists(_response);
        });
    }

    protected processGetTodoLists(response: Response): Promise<TodosVm> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = TodosVm.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<TodosVm>(null as any);
    }

    createTodoList(command: CreateTodoListCommand): Promise<number> {
        let url_ = this.baseUrl + "/api/TodoLists";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCreateTodoList(_response);
        });
    }

    protected processCreateTodoList(response: Response): Promise<number> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 201) {
            return response.text().then((_responseText) => {
            let result201: any = null;
            let resultData201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result201 = resultData201 !== undefined ? resultData201 : <any>null;
    
            return result201;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<number>(null as any);
    }

    updateTodoList(id: number, command: UpdateTodoListCommand): Promise<void> {
        let url_ = this.baseUrl + "/api/TodoLists/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdateTodoList(_response);
        });
    }

    protected processUpdateTodoList(response: Response): Promise<void> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 204) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            return throwException("A server side error occurred.", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    deleteTodoList(id: number): Promise<void> {
        let url_ = this.baseUrl + "/api/TodoLists/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDeleteTodoList(_response);
        });
    }

    protected processDeleteTodoList(response: Response): Promise<void> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 204) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }
}

export class UsersRoleClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    getApiUsersRoleGetUserNamesByRoleName(roleName: string | null): Promise<UserRoleInfoVm> {
        let url_ = this.baseUrl + "/api/UsersRole/GetUserNamesByRoleName?";
        if (roleName === undefined)
            throw new Error("The parameter 'roleName' must be defined.");
        else if(roleName !== null)
            url_ += "RoleName=" + encodeURIComponent("" + roleName) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetApiUsersRoleGetUserNamesByRoleName(_response);
        });
    }

    protected processGetApiUsersRoleGetUserNamesByRoleName(response: Response): Promise<UserRoleInfoVm> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = UserRoleInfoVm.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<UserRoleInfoVm>(null as any);
    }
}

export class WeatherForecastsClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    getWeatherForecasts(): Promise<WeatherForecast[]> {
        let url_ = this.baseUrl + "/api/WeatherForecasts";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetWeatherForecasts(_response);
        });
    }

    protected processGetWeatherForecasts(response: Response): Promise<WeatherForecast[]> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(WeatherForecast.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<WeatherForecast[]>(null as any);
    }
}

export class AuthResponseDto implements IAuthResponseDto {
    userId?: string;
    email?: string;
    role?: string;
    regionId?: number;
    userName?: string;
    accessToken?: string;
    refreshToken?: string;
    refreshTokenExpiration?: Date;
    availableRegions?: RegionDto[] | undefined;
    selectedRegion?: RegionDto | undefined;

    constructor(data?: IAuthResponseDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.userId = _data["userId"];
            this.email = _data["email"];
            this.role = _data["role"];
            this.regionId = _data["regionId"];
            this.userName = _data["userName"];
            this.accessToken = _data["accessToken"];
            this.refreshToken = _data["refreshToken"];
            this.refreshTokenExpiration = _data["refreshTokenExpiration"] ? new Date(_data["refreshTokenExpiration"].toString()) : <any>undefined;
            if (Array.isArray(_data["availableRegions"])) {
                this.availableRegions = [] as any;
                for (let item of _data["availableRegions"])
                    this.availableRegions!.push(RegionDto.fromJS(item));
            }
            this.selectedRegion = _data["selectedRegion"] ? RegionDto.fromJS(_data["selectedRegion"]) : <any>undefined;
        }
    }

    static fromJS(data: any): AuthResponseDto {
        data = typeof data === 'object' ? data : {};
        let result = new AuthResponseDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId;
        data["email"] = this.email;
        data["role"] = this.role;
        data["regionId"] = this.regionId;
        data["userName"] = this.userName;
        data["accessToken"] = this.accessToken;
        data["refreshToken"] = this.refreshToken;
        data["refreshTokenExpiration"] = this.refreshTokenExpiration ? this.refreshTokenExpiration.toISOString() : <any>undefined;
        if (Array.isArray(this.availableRegions)) {
            data["availableRegions"] = [];
            for (let item of this.availableRegions)
                data["availableRegions"].push(item.toJSON());
        }
        data["selectedRegion"] = this.selectedRegion ? this.selectedRegion.toJSON() : <any>undefined;
        return data;
    }
}

export interface IAuthResponseDto {
    userId?: string;
    email?: string;
    role?: string;
    regionId?: number;
    userName?: string;
    accessToken?: string;
    refreshToken?: string;
    refreshTokenExpiration?: Date;
    availableRegions?: RegionDto[] | undefined;
    selectedRegion?: RegionDto | undefined;
}

export class RegionDto implements IRegionDto {
    id?: number;
    name?: string;
    domainUrl?: string | undefined;
    homePage?: string;

    constructor(data?: IRegionDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.domainUrl = _data["domainUrl"];
            this.homePage = _data["homePage"];
        }
    }

    static fromJS(data: any): RegionDto {
        data = typeof data === 'object' ? data : {};
        let result = new RegionDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["domainUrl"] = this.domainUrl;
        data["homePage"] = this.homePage;
        return data;
    }
}

export interface IRegionDto {
    id?: number;
    name?: string;
    domainUrl?: string | undefined;
    homePage?: string;
}

export class LoginCommand implements ILoginCommand {
    userName?: string;
    password?: string;

    constructor(data?: ILoginCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.userName = _data["userName"];
            this.password = _data["password"];
        }
    }

    static fromJS(data: any): LoginCommand {
        data = typeof data === 'object' ? data : {};
        let result = new LoginCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userName"] = this.userName;
        data["password"] = this.password;
        return data;
    }
}

export interface ILoginCommand {
    userName?: string;
    password?: string;
}

export class RegisterCommand implements IRegisterCommand {
    firstName?: string;
    lastName?: string;
    email?: string;
    userName?: string;
    password?: string;
    phoneNumber?: string;
    nationalCode?: string;
    roles?: string[];

    constructor(data?: IRegisterCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.firstName = _data["firstName"];
            this.lastName = _data["lastName"];
            this.email = _data["email"];
            this.userName = _data["userName"];
            this.password = _data["password"];
            this.phoneNumber = _data["phoneNumber"];
            this.nationalCode = _data["nationalCode"];
            if (Array.isArray(_data["roles"])) {
                this.roles = [] as any;
                for (let item of _data["roles"])
                    this.roles!.push(item);
            }
        }
    }

    static fromJS(data: any): RegisterCommand {
        data = typeof data === 'object' ? data : {};
        let result = new RegisterCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        data["email"] = this.email;
        data["userName"] = this.userName;
        data["password"] = this.password;
        data["phoneNumber"] = this.phoneNumber;
        data["nationalCode"] = this.nationalCode;
        if (Array.isArray(this.roles)) {
            data["roles"] = [];
            for (let item of this.roles)
                data["roles"].push(item);
        }
        return data;
    }
}

export interface IRegisterCommand {
    firstName?: string;
    lastName?: string;
    email?: string;
    userName?: string;
    password?: string;
    phoneNumber?: string;
    nationalCode?: string;
    roles?: string[];
}

export class ForgotPasswordCommand implements IForgotPasswordCommand {
    mobile?: string;

    constructor(data?: IForgotPasswordCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.mobile = _data["mobile"];
        }
    }

    static fromJS(data: any): ForgotPasswordCommand {
        data = typeof data === 'object' ? data : {};
        let result = new ForgotPasswordCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["mobile"] = this.mobile;
        return data;
    }
}

export interface IForgotPasswordCommand {
    mobile?: string;
}

export class ResetPasswordCommand implements IResetPasswordCommand {
    mobile?: string;
    code?: string;
    newPassword?: string;

    constructor(data?: IResetPasswordCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.mobile = _data["mobile"];
            this.code = _data["code"];
            this.newPassword = _data["newPassword"];
        }
    }

    static fromJS(data: any): ResetPasswordCommand {
        data = typeof data === 'object' ? data : {};
        let result = new ResetPasswordCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["mobile"] = this.mobile;
        data["code"] = this.code;
        data["newPassword"] = this.newPassword;
        return data;
    }
}

export interface IResetPasswordCommand {
    mobile?: string;
    code?: string;
    newPassword?: string;
}

export class RoleDto implements IRoleDto {
    id?: string;
    name?: string | undefined;

    constructor(data?: IRoleDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): RoleDto {
        data = typeof data === 'object' ? data : {};
        let result = new RoleDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        return data;
    }
}

export interface IRoleDto {
    id?: string;
    name?: string | undefined;
}

export class UserProfileDto implements IUserProfileDto {
    id?: string;
    email?: string;
    fullName?: string;
    createdAt?: Date;
    regionName?: string | undefined;
    roles?: string[] | undefined;

    constructor(data?: IUserProfileDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.email = _data["email"];
            this.fullName = _data["fullName"];
            this.createdAt = _data["createdAt"] ? new Date(_data["createdAt"].toString()) : <any>undefined;
            this.regionName = _data["regionName"];
            if (Array.isArray(_data["roles"])) {
                this.roles = [] as any;
                for (let item of _data["roles"])
                    this.roles!.push(item);
            }
        }
    }

    static fromJS(data: any): UserProfileDto {
        data = typeof data === 'object' ? data : {};
        let result = new UserProfileDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["email"] = this.email;
        data["fullName"] = this.fullName;
        data["createdAt"] = this.createdAt ? this.createdAt.toISOString() : <any>undefined;
        data["regionName"] = this.regionName;
        if (Array.isArray(this.roles)) {
            data["roles"] = [];
            for (let item of this.roles)
                data["roles"].push(item);
        }
        return data;
    }
}

export interface IUserProfileDto {
    id?: string;
    email?: string;
    fullName?: string;
    createdAt?: Date;
    regionName?: string | undefined;
    roles?: string[] | undefined;
}

export class UpdateProfileCommand implements IUpdateProfileCommand {
    userId?: string;
    firstName?: string;
    lastName?: string;
    phoneNumber?: string | undefined;
    nationalCode?: string | undefined;
    roles?: string[] | undefined;

    constructor(data?: IUpdateProfileCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.userId = _data["userId"];
            this.firstName = _data["firstName"];
            this.lastName = _data["lastName"];
            this.phoneNumber = _data["phoneNumber"];
            this.nationalCode = _data["nationalCode"];
            if (Array.isArray(_data["roles"])) {
                this.roles = [] as any;
                for (let item of _data["roles"])
                    this.roles!.push(item);
            }
        }
    }

    static fromJS(data: any): UpdateProfileCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateProfileCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId;
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        data["phoneNumber"] = this.phoneNumber;
        data["nationalCode"] = this.nationalCode;
        if (Array.isArray(this.roles)) {
            data["roles"] = [];
            for (let item of this.roles)
                data["roles"].push(item);
        }
        return data;
    }
}

export interface IUpdateProfileCommand {
    userId?: string;
    firstName?: string;
    lastName?: string;
    phoneNumber?: string | undefined;
    nationalCode?: string | undefined;
    roles?: string[] | undefined;
}

export class ChangePasswordCommand implements IChangePasswordCommand {
    userId?: string;
    currentPassword?: string;
    newPassword?: string;

    constructor(data?: IChangePasswordCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.userId = _data["userId"];
            this.currentPassword = _data["currentPassword"];
            this.newPassword = _data["newPassword"];
        }
    }

    static fromJS(data: any): ChangePasswordCommand {
        data = typeof data === 'object' ? data : {};
        let result = new ChangePasswordCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId;
        data["currentPassword"] = this.currentPassword;
        data["newPassword"] = this.newPassword;
        return data;
    }
}

export interface IChangePasswordCommand {
    userId?: string;
    currentPassword?: string;
    newPassword?: string;
}

export class RefreshTokenCommand implements IRefreshTokenCommand {
    refreshToken?: string;
    accessToken?: string;

    constructor(data?: IRefreshTokenCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.refreshToken = _data["refreshToken"];
            this.accessToken = _data["accessToken"];
        }
    }

    static fromJS(data: any): RefreshTokenCommand {
        data = typeof data === 'object' ? data : {};
        let result = new RefreshTokenCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["refreshToken"] = this.refreshToken;
        data["accessToken"] = this.accessToken;
        return data;
    }
}

export interface IRefreshTokenCommand {
    refreshToken?: string;
    accessToken?: string;
}

export class LogoutCommand implements ILogoutCommand {
    userId?: string;

    constructor(data?: ILogoutCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.userId = _data["userId"];
        }
    }

    static fromJS(data: any): LogoutCommand {
        data = typeof data === 'object' ? data : {};
        let result = new LogoutCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId;
        return data;
    }
}

export interface ILogoutCommand {
    userId?: string;
}

export class SelectRegionCommand implements ISelectRegionCommand {
    userId?: string;
    regionId?: number;

    constructor(data?: ISelectRegionCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.userId = _data["userId"];
            this.regionId = _data["regionId"];
        }
    }

    static fromJS(data: any): SelectRegionCommand {
        data = typeof data === 'object' ? data : {};
        let result = new SelectRegionCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId;
        data["regionId"] = this.regionId;
        return data;
    }
}

export interface ISelectRegionCommand {
    userId?: string;
    regionId?: number;
}

export class CaseTypeDto implements ICaseTypeDto {
    id?: number;
    name?: string;

    constructor(data?: ICaseTypeDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): CaseTypeDto {
        data = typeof data === 'object' ? data : {};
        let result = new CaseTypeDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        return data;
    }
}

export interface ICaseTypeDto {
    id?: number;
    name?: string;
}

export class CreateCaseTypeCommand implements ICreateCaseTypeCommand {
    name?: string;

    constructor(data?: ICreateCaseTypeCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): CreateCaseTypeCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateCaseTypeCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        return data;
    }
}

export interface ICreateCaseTypeCommand {
    name?: string;
}

export class UpdateCaseTypeCommand implements IUpdateCaseTypeCommand {
    id?: number;
    name?: string;

    constructor(data?: IUpdateCaseTypeCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): UpdateCaseTypeCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateCaseTypeCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        return data;
    }
}

export interface IUpdateCaseTypeCommand {
    id?: number;
    name?: string;
}

export class DeleteCaseTypeCommand implements IDeleteCaseTypeCommand {
    id?: number;

    constructor(data?: IDeleteCaseTypeCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): DeleteCaseTypeCommand {
        data = typeof data === 'object' ? data : {};
        let result = new DeleteCaseTypeCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        return data;
    }
}

export interface IDeleteCaseTypeCommand {
    id?: number;
}

export class CaseStatusDto implements ICaseStatusDto {
    id?: number;
    name?: string;

    constructor(data?: ICaseStatusDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): CaseStatusDto {
        data = typeof data === 'object' ? data : {};
        let result = new CaseStatusDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        return data;
    }
}

export interface ICaseStatusDto {
    id?: number;
    name?: string;
}

export class CreateCaseStatusCommand implements ICreateCaseStatusCommand {
    name?: string;

    constructor(data?: ICreateCaseStatusCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): CreateCaseStatusCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateCaseStatusCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        return data;
    }
}

export interface ICreateCaseStatusCommand {
    name?: string;
}

export class UpdateCaseStatusCommand implements IUpdateCaseStatusCommand {
    id?: number;
    name?: string;

    constructor(data?: IUpdateCaseStatusCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): UpdateCaseStatusCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateCaseStatusCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        return data;
    }
}

export interface IUpdateCaseStatusCommand {
    id?: number;
    name?: string;
}

export class DeleteCaseStatusCommand implements IDeleteCaseStatusCommand {
    id?: number;

    constructor(data?: IDeleteCaseStatusCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): DeleteCaseStatusCommand {
        data = typeof data === 'object' ? data : {};
        let result = new DeleteCaseStatusCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        return data;
    }
}

export interface IDeleteCaseStatusCommand {
    id?: number;
}

export class PredefinedSubjectDto implements IPredefinedSubjectDto {
    id?: number;
    title?: string;
    caseTypeId?: number;

    constructor(data?: IPredefinedSubjectDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.title = _data["title"];
            this.caseTypeId = _data["caseTypeId"];
        }
    }

    static fromJS(data: any): PredefinedSubjectDto {
        data = typeof data === 'object' ? data : {};
        let result = new PredefinedSubjectDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["title"] = this.title;
        data["caseTypeId"] = this.caseTypeId;
        return data;
    }
}

export interface IPredefinedSubjectDto {
    id?: number;
    title?: string;
    caseTypeId?: number;
}

export class CreateCasePredefinedSubjectCommand implements ICreateCasePredefinedSubjectCommand {
    title?: string;
    caseTypeId?: number;
    regionId?: number;

    constructor(data?: ICreateCasePredefinedSubjectCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.title = _data["title"];
            this.caseTypeId = _data["caseTypeId"];
            this.regionId = _data["regionId"];
        }
    }

    static fromJS(data: any): CreateCasePredefinedSubjectCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateCasePredefinedSubjectCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["title"] = this.title;
        data["caseTypeId"] = this.caseTypeId;
        data["regionId"] = this.regionId;
        return data;
    }
}

export interface ICreateCasePredefinedSubjectCommand {
    title?: string;
    caseTypeId?: number;
    regionId?: number;
}

export class UpdateCasePredefinedSubjectCommand implements IUpdateCasePredefinedSubjectCommand {
    id?: number;
    title?: string;
    caseTypeId?: number;

    constructor(data?: IUpdateCasePredefinedSubjectCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.title = _data["title"];
            this.caseTypeId = _data["caseTypeId"];
        }
    }

    static fromJS(data: any): UpdateCasePredefinedSubjectCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateCasePredefinedSubjectCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["title"] = this.title;
        data["caseTypeId"] = this.caseTypeId;
        return data;
    }
}

export interface IUpdateCasePredefinedSubjectCommand {
    id?: number;
    title?: string;
    caseTypeId?: number;
}

export class DeleteCasePredefinedSubjectCommand implements IDeleteCasePredefinedSubjectCommand {
    id?: number;

    constructor(data?: IDeleteCasePredefinedSubjectCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): DeleteCasePredefinedSubjectCommand {
        data = typeof data === 'object' ? data : {};
        let result = new DeleteCasePredefinedSubjectCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        return data;
    }
}

export interface IDeleteCasePredefinedSubjectCommand {
    id?: number;
}

export class ClientRoleInCaseDto implements IClientRoleInCaseDto {
    id?: number;
    title?: string;
    caseTypeId?: number;

    constructor(data?: IClientRoleInCaseDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.title = _data["title"];
            this.caseTypeId = _data["caseTypeId"];
        }
    }

    static fromJS(data: any): ClientRoleInCaseDto {
        data = typeof data === 'object' ? data : {};
        let result = new ClientRoleInCaseDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["title"] = this.title;
        data["caseTypeId"] = this.caseTypeId;
        return data;
    }
}

export interface IClientRoleInCaseDto {
    id?: number;
    title?: string;
    caseTypeId?: number;
}

export class CreateClientRoleInCaseCommand implements ICreateClientRoleInCaseCommand {
    title?: string;
    caseTypeId?: number;

    constructor(data?: ICreateClientRoleInCaseCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.title = _data["title"];
            this.caseTypeId = _data["caseTypeId"];
        }
    }

    static fromJS(data: any): CreateClientRoleInCaseCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateClientRoleInCaseCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["title"] = this.title;
        data["caseTypeId"] = this.caseTypeId;
        return data;
    }
}

export interface ICreateClientRoleInCaseCommand {
    title?: string;
    caseTypeId?: number;
}

export class UpdateClientRoleInCaseCommand implements IUpdateClientRoleInCaseCommand {
    id?: number;
    title?: string;
    caseTypeId?: number;

    constructor(data?: IUpdateClientRoleInCaseCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.title = _data["title"];
            this.caseTypeId = _data["caseTypeId"];
        }
    }

    static fromJS(data: any): UpdateClientRoleInCaseCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateClientRoleInCaseCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["title"] = this.title;
        data["caseTypeId"] = this.caseTypeId;
        return data;
    }
}

export interface IUpdateClientRoleInCaseCommand {
    id?: number;
    title?: string;
    caseTypeId?: number;
}

export class DeleteClientRoleInCaseCommand implements IDeleteClientRoleInCaseCommand {
    id?: number;

    constructor(data?: IDeleteClientRoleInCaseCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): DeleteClientRoleInCaseCommand {
        data = typeof data === 'object' ? data : {};
        let result = new DeleteClientRoleInCaseCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        return data;
    }
}

export interface IDeleteClientRoleInCaseCommand {
    id?: number;
}

export class JudgeDto implements IJudgeDto {
    id?: string | undefined;
    firstName?: string | undefined;
    lastName?: string | undefined;
    fullName?: string | undefined;
    regionId?: number | undefined;

    constructor(data?: IJudgeDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.firstName = _data["firstName"];
            this.lastName = _data["lastName"];
            this.fullName = _data["fullName"];
            this.regionId = _data["regionId"];
        }
    }

    static fromJS(data: any): JudgeDto {
        data = typeof data === 'object' ? data : {};
        let result = new JudgeDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        data["fullName"] = this.fullName;
        data["regionId"] = this.regionId;
        return data;
    }
}

export interface IJudgeDto {
    id?: string | undefined;
    firstName?: string | undefined;
    lastName?: string | undefined;
    fullName?: string | undefined;
    regionId?: number | undefined;
}

export class CreateJudgeCommand implements ICreateJudgeCommand {
    firstName?: string;
    lastName?: string;

    constructor(data?: ICreateJudgeCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.firstName = _data["firstName"];
            this.lastName = _data["lastName"];
        }
    }

    static fromJS(data: any): CreateJudgeCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateJudgeCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        return data;
    }
}

export interface ICreateJudgeCommand {
    firstName?: string;
    lastName?: string;
}

export class UpdateJudgeCommand implements IUpdateJudgeCommand {
    id?: number;
    firstName?: string;
    lastName?: string;

    constructor(data?: IUpdateJudgeCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.firstName = _data["firstName"];
            this.lastName = _data["lastName"];
        }
    }

    static fromJS(data: any): UpdateJudgeCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateJudgeCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        return data;
    }
}

export interface IUpdateJudgeCommand {
    id?: number;
    firstName?: string;
    lastName?: string;
}

export class DeleteJudgeCommand implements IDeleteJudgeCommand {
    id?: number;

    constructor(data?: IDeleteJudgeCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): DeleteJudgeCommand {
        data = typeof data === 'object' ? data : {};
        let result = new DeleteJudgeCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        return data;
    }
}

export interface IDeleteJudgeCommand {
    id?: number;
}

export class CourtTypeDto implements ICourtTypeDto {
    id?: number;
    title?: string;

    constructor(data?: ICourtTypeDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.title = _data["title"];
        }
    }

    static fromJS(data: any): CourtTypeDto {
        data = typeof data === 'object' ? data : {};
        let result = new CourtTypeDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["title"] = this.title;
        return data;
    }
}

export interface ICourtTypeDto {
    id?: number;
    title?: string;
}

export class CreateCourtTypeCommand implements ICreateCourtTypeCommand {
    title?: string;

    constructor(data?: ICreateCourtTypeCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.title = _data["title"];
        }
    }

    static fromJS(data: any): CreateCourtTypeCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateCourtTypeCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["title"] = this.title;
        return data;
    }
}

export interface ICreateCourtTypeCommand {
    title?: string;
}

export class UpdateCourtTypeCommand implements IUpdateCourtTypeCommand {
    id?: number;
    title?: string;

    constructor(data?: IUpdateCourtTypeCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.title = _data["title"];
        }
    }

    static fromJS(data: any): UpdateCourtTypeCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateCourtTypeCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["title"] = this.title;
        return data;
    }
}

export interface IUpdateCourtTypeCommand {
    id?: number;
    title?: string;
}

export class DeleteCourtTypeCommand implements IDeleteCourtTypeCommand {
    id?: number;

    constructor(data?: IDeleteCourtTypeCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): DeleteCourtTypeCommand {
        data = typeof data === 'object' ? data : {};
        let result = new DeleteCourtTypeCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        return data;
    }
}

export interface IDeleteCourtTypeCommand {
    id?: number;
}

export class CourtSubtypeDto implements ICourtSubtypeDto {
    id?: string | undefined;
    title?: string | undefined;
    courtTypeId?: number;

    constructor(data?: ICourtSubtypeDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.title = _data["title"];
            this.courtTypeId = _data["courtTypeId"];
        }
    }

    static fromJS(data: any): CourtSubtypeDto {
        data = typeof data === 'object' ? data : {};
        let result = new CourtSubtypeDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["title"] = this.title;
        data["courtTypeId"] = this.courtTypeId;
        return data;
    }
}

export interface ICourtSubtypeDto {
    id?: string | undefined;
    title?: string | undefined;
    courtTypeId?: number;
}

export class CreateCourtSubTypeCommand implements ICreateCourtSubTypeCommand {
    title?: string;
    courtTypeId?: number;

    constructor(data?: ICreateCourtSubTypeCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.title = _data["title"];
            this.courtTypeId = _data["courtTypeId"];
        }
    }

    static fromJS(data: any): CreateCourtSubTypeCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateCourtSubTypeCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["title"] = this.title;
        data["courtTypeId"] = this.courtTypeId;
        return data;
    }
}

export interface ICreateCourtSubTypeCommand {
    title?: string;
    courtTypeId?: number;
}

export class UpdateCourtSubTypeCommand implements IUpdateCourtSubTypeCommand {
    id?: number;
    title?: string;
    courtTypeId?: number;

    constructor(data?: IUpdateCourtSubTypeCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.title = _data["title"];
            this.courtTypeId = _data["courtTypeId"];
        }
    }

    static fromJS(data: any): UpdateCourtSubTypeCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateCourtSubTypeCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["title"] = this.title;
        data["courtTypeId"] = this.courtTypeId;
        return data;
    }
}

export interface IUpdateCourtSubTypeCommand {
    id?: number;
    title?: string;
    courtTypeId?: number;
}

export class DeleteCourtSubTypeCommand implements IDeleteCourtSubTypeCommand {
    id?: number;

    constructor(data?: IDeleteCourtSubTypeCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): DeleteCourtSubTypeCommand {
        data = typeof data === 'object' ? data : {};
        let result = new DeleteCourtSubTypeCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        return data;
    }
}

export interface IDeleteCourtSubTypeCommand {
    id?: number;
}

export class CaseFinancialStatusDto implements ICaseFinancialStatusDto {
    id?: number;
    caseNumber?: string | undefined;
    clients?: UserBasicDto[] | undefined;
    subject?: string | undefined;
    stage?: string | undefined;
    caseStatus?: CaseStatusDto | undefined;
    totalServiceCost?: PaymentInfo | undefined;
    totalPaymentAgree?: PaymentInfo | undefined;
    totalPaymentTnx?: PaymentInfo | undefined;
    pastDue?: PaymentInfo | undefined;

    constructor(data?: ICaseFinancialStatusDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.caseNumber = _data["caseNumber"];
            if (Array.isArray(_data["clients"])) {
                this.clients = [] as any;
                for (let item of _data["clients"])
                    this.clients!.push(UserBasicDto.fromJS(item));
            }
            this.subject = _data["subject"];
            this.stage = _data["stage"];
            this.caseStatus = _data["caseStatus"] ? CaseStatusDto.fromJS(_data["caseStatus"]) : <any>undefined;
            this.totalServiceCost = _data["totalServiceCost"] ? PaymentInfo.fromJS(_data["totalServiceCost"]) : <any>undefined;
            this.totalPaymentAgree = _data["totalPaymentAgree"] ? PaymentInfo.fromJS(_data["totalPaymentAgree"]) : <any>undefined;
            this.totalPaymentTnx = _data["totalPaymentTnx"] ? PaymentInfo.fromJS(_data["totalPaymentTnx"]) : <any>undefined;
            this.pastDue = _data["pastDue"] ? PaymentInfo.fromJS(_data["pastDue"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CaseFinancialStatusDto {
        data = typeof data === 'object' ? data : {};
        let result = new CaseFinancialStatusDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["caseNumber"] = this.caseNumber;
        if (Array.isArray(this.clients)) {
            data["clients"] = [];
            for (let item of this.clients)
                data["clients"].push(item.toJSON());
        }
        data["subject"] = this.subject;
        data["stage"] = this.stage;
        data["caseStatus"] = this.caseStatus ? this.caseStatus.toJSON() : <any>undefined;
        data["totalServiceCost"] = this.totalServiceCost ? this.totalServiceCost.toJSON() : <any>undefined;
        data["totalPaymentAgree"] = this.totalPaymentAgree ? this.totalPaymentAgree.toJSON() : <any>undefined;
        data["totalPaymentTnx"] = this.totalPaymentTnx ? this.totalPaymentTnx.toJSON() : <any>undefined;
        data["pastDue"] = this.pastDue ? this.pastDue.toJSON() : <any>undefined;
        return data;
    }
}

export interface ICaseFinancialStatusDto {
    id?: number;
    caseNumber?: string | undefined;
    clients?: UserBasicDto[] | undefined;
    subject?: string | undefined;
    stage?: string | undefined;
    caseStatus?: CaseStatusDto | undefined;
    totalServiceCost?: PaymentInfo | undefined;
    totalPaymentAgree?: PaymentInfo | undefined;
    totalPaymentTnx?: PaymentInfo | undefined;
    pastDue?: PaymentInfo | undefined;
}

export class UserBasicDto implements IUserBasicDto {
    id?: string;
    firstName?: string;
    lastName?: string;

    constructor(data?: IUserBasicDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.firstName = _data["firstName"];
            this.lastName = _data["lastName"];
        }
    }

    static fromJS(data: any): UserBasicDto {
        data = typeof data === 'object' ? data : {};
        let result = new UserBasicDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        return data;
    }
}

export interface IUserBasicDto {
    id?: string;
    firstName?: string;
    lastName?: string;
}

export class PaymentInfo implements IPaymentInfo {
    fixed?: number;
    percentage?: number;

    constructor(data?: IPaymentInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.fixed = _data["fixed"];
            this.percentage = _data["percentage"];
        }
    }

    static fromJS(data: any): PaymentInfo {
        data = typeof data === 'object' ? data : {};
        let result = new PaymentInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["fixed"] = this.fixed;
        data["percentage"] = this.percentage;
        return data;
    }
}

export interface IPaymentInfo {
    fixed?: number;
    percentage?: number;
}

export class CreateCaseServiceCommand implements ICreateCaseServiceCommand {
    caseId?: number;
    serviceTypeId?: number | undefined;
    serviceSubjectId?: number | undefined;
    serviceQuantity?: string | undefined;
    serviceCost?: string | undefined;
    hasDiscount?: boolean | undefined;
    discountPercentage?: string | undefined;
    finalCost?: string | undefined;

    constructor(data?: ICreateCaseServiceCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.caseId = _data["caseId"];
            this.serviceTypeId = _data["serviceTypeId"];
            this.serviceSubjectId = _data["serviceSubjectId"];
            this.serviceQuantity = _data["serviceQuantity"];
            this.serviceCost = _data["serviceCost"];
            this.hasDiscount = _data["hasDiscount"];
            this.discountPercentage = _data["discountPercentage"];
            this.finalCost = _data["finalCost"];
        }
    }

    static fromJS(data: any): CreateCaseServiceCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateCaseServiceCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["caseId"] = this.caseId;
        data["serviceTypeId"] = this.serviceTypeId;
        data["serviceSubjectId"] = this.serviceSubjectId;
        data["serviceQuantity"] = this.serviceQuantity;
        data["serviceCost"] = this.serviceCost;
        data["hasDiscount"] = this.hasDiscount;
        data["discountPercentage"] = this.discountPercentage;
        data["finalCost"] = this.finalCost;
        return data;
    }
}

export interface ICreateCaseServiceCommand {
    caseId?: number;
    serviceTypeId?: number | undefined;
    serviceSubjectId?: number | undefined;
    serviceQuantity?: string | undefined;
    serviceCost?: string | undefined;
    hasDiscount?: boolean | undefined;
    discountPercentage?: string | undefined;
    finalCost?: string | undefined;
}

export class UpdateCaseServiceCommand implements IUpdateCaseServiceCommand {
    id?: number;
    serviceTypeId?: number | undefined;
    serviceSubjectId?: number | undefined;
    serviceQuantity?: string | undefined;
    serviceCost?: string | undefined;
    hasDiscount?: boolean | undefined;
    discountPercentage?: string | undefined;
    finalCost?: string | undefined;

    constructor(data?: IUpdateCaseServiceCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.serviceTypeId = _data["serviceTypeId"];
            this.serviceSubjectId = _data["serviceSubjectId"];
            this.serviceQuantity = _data["serviceQuantity"];
            this.serviceCost = _data["serviceCost"];
            this.hasDiscount = _data["hasDiscount"];
            this.discountPercentage = _data["discountPercentage"];
            this.finalCost = _data["finalCost"];
        }
    }

    static fromJS(data: any): UpdateCaseServiceCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateCaseServiceCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["serviceTypeId"] = this.serviceTypeId;
        data["serviceSubjectId"] = this.serviceSubjectId;
        data["serviceQuantity"] = this.serviceQuantity;
        data["serviceCost"] = this.serviceCost;
        data["hasDiscount"] = this.hasDiscount;
        data["discountPercentage"] = this.discountPercentage;
        data["finalCost"] = this.finalCost;
        return data;
    }
}

export interface IUpdateCaseServiceCommand {
    id?: number;
    serviceTypeId?: number | undefined;
    serviceSubjectId?: number | undefined;
    serviceQuantity?: string | undefined;
    serviceCost?: string | undefined;
    hasDiscount?: boolean | undefined;
    discountPercentage?: string | undefined;
    finalCost?: string | undefined;
}

export class DeleteCaseServiceCommand implements IDeleteCaseServiceCommand {
    id?: number;

    constructor(data?: IDeleteCaseServiceCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): DeleteCaseServiceCommand {
        data = typeof data === 'object' ? data : {};
        let result = new DeleteCaseServiceCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        return data;
    }
}

export interface IDeleteCaseServiceCommand {
    id?: number;
}

export class CaseServiceVm implements ICaseServiceVm {
    caseServices?: CaseServiceDto[];

    constructor(data?: ICaseServiceVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["caseServices"])) {
                this.caseServices = [] as any;
                for (let item of _data["caseServices"])
                    this.caseServices!.push(CaseServiceDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CaseServiceVm {
        data = typeof data === 'object' ? data : {};
        let result = new CaseServiceVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.caseServices)) {
            data["caseServices"] = [];
            for (let item of this.caseServices)
                data["caseServices"].push(item.toJSON());
        }
        return data;
    }
}

export interface ICaseServiceVm {
    caseServices?: CaseServiceDto[];
}

export class CaseServiceDto implements ICaseServiceDto {
    id?: number;
    caseId?: number;
    serviceType?: ServiceTypeDto | undefined;
    serviceSubject?: ServiceSubjectDto | undefined;
    serviceQuantity?: string | undefined;
    serviceCost?: string | undefined;
    hasDiscount?: boolean | undefined;
    discountPercentage?: string | undefined;
    finalCost?: string | undefined;

    constructor(data?: ICaseServiceDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.caseId = _data["caseId"];
            this.serviceType = _data["serviceType"] ? ServiceTypeDto.fromJS(_data["serviceType"]) : <any>undefined;
            this.serviceSubject = _data["serviceSubject"] ? ServiceSubjectDto.fromJS(_data["serviceSubject"]) : <any>undefined;
            this.serviceQuantity = _data["serviceQuantity"];
            this.serviceCost = _data["serviceCost"];
            this.hasDiscount = _data["hasDiscount"];
            this.discountPercentage = _data["discountPercentage"];
            this.finalCost = _data["finalCost"];
        }
    }

    static fromJS(data: any): CaseServiceDto {
        data = typeof data === 'object' ? data : {};
        let result = new CaseServiceDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["caseId"] = this.caseId;
        data["serviceType"] = this.serviceType ? this.serviceType.toJSON() : <any>undefined;
        data["serviceSubject"] = this.serviceSubject ? this.serviceSubject.toJSON() : <any>undefined;
        data["serviceQuantity"] = this.serviceQuantity;
        data["serviceCost"] = this.serviceCost;
        data["hasDiscount"] = this.hasDiscount;
        data["discountPercentage"] = this.discountPercentage;
        data["finalCost"] = this.finalCost;
        return data;
    }
}

export interface ICaseServiceDto {
    id?: number;
    caseId?: number;
    serviceType?: ServiceTypeDto | undefined;
    serviceSubject?: ServiceSubjectDto | undefined;
    serviceQuantity?: string | undefined;
    serviceCost?: string | undefined;
    hasDiscount?: boolean | undefined;
    discountPercentage?: string | undefined;
    finalCost?: string | undefined;
}

export class ServiceTypeDto implements IServiceTypeDto {
    id?: number;
    title?: string;

    constructor(data?: IServiceTypeDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.title = _data["title"];
        }
    }

    static fromJS(data: any): ServiceTypeDto {
        data = typeof data === 'object' ? data : {};
        let result = new ServiceTypeDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["title"] = this.title;
        return data;
    }
}

export interface IServiceTypeDto {
    id?: number;
    title?: string;
}

export class ServiceSubjectDto implements IServiceSubjectDto {
    id?: number;
    title?: string;
    serviceTypeId?: number;
    serviceUnitId?: number;
    percentage?: string;
    cost?: string;

    constructor(data?: IServiceSubjectDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.title = _data["title"];
            this.serviceTypeId = _data["serviceTypeId"];
            this.serviceUnitId = _data["serviceUnitId"];
            this.percentage = _data["percentage"];
            this.cost = _data["cost"];
        }
    }

    static fromJS(data: any): ServiceSubjectDto {
        data = typeof data === 'object' ? data : {};
        let result = new ServiceSubjectDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["title"] = this.title;
        data["serviceTypeId"] = this.serviceTypeId;
        data["serviceUnitId"] = this.serviceUnitId;
        data["percentage"] = this.percentage;
        data["cost"] = this.cost;
        return data;
    }
}

export interface IServiceSubjectDto {
    id?: number;
    title?: string;
    serviceTypeId?: number;
    serviceUnitId?: number;
    percentage?: string;
    cost?: string;
}

export class InitialCaseServicesRegDataVM implements IInitialCaseServicesRegDataVM {
    serviceTypes?: ServiceTypeDto[];
    serviceSubjects?: ServiceSubjectDto[];
    serviceUnits?: ServiceUnitDto[];

    constructor(data?: IInitialCaseServicesRegDataVM) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["serviceTypes"])) {
                this.serviceTypes = [] as any;
                for (let item of _data["serviceTypes"])
                    this.serviceTypes!.push(ServiceTypeDto.fromJS(item));
            }
            if (Array.isArray(_data["serviceSubjects"])) {
                this.serviceSubjects = [] as any;
                for (let item of _data["serviceSubjects"])
                    this.serviceSubjects!.push(ServiceSubjectDto.fromJS(item));
            }
            if (Array.isArray(_data["serviceUnits"])) {
                this.serviceUnits = [] as any;
                for (let item of _data["serviceUnits"])
                    this.serviceUnits!.push(ServiceUnitDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): InitialCaseServicesRegDataVM {
        data = typeof data === 'object' ? data : {};
        let result = new InitialCaseServicesRegDataVM();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.serviceTypes)) {
            data["serviceTypes"] = [];
            for (let item of this.serviceTypes)
                data["serviceTypes"].push(item.toJSON());
        }
        if (Array.isArray(this.serviceSubjects)) {
            data["serviceSubjects"] = [];
            for (let item of this.serviceSubjects)
                data["serviceSubjects"].push(item.toJSON());
        }
        if (Array.isArray(this.serviceUnits)) {
            data["serviceUnits"] = [];
            for (let item of this.serviceUnits)
                data["serviceUnits"].push(item.toJSON());
        }
        return data;
    }
}

export interface IInitialCaseServicesRegDataVM {
    serviceTypes?: ServiceTypeDto[];
    serviceSubjects?: ServiceSubjectDto[];
    serviceUnits?: ServiceUnitDto[];
}

export class ServiceUnitDto implements IServiceUnitDto {
    id?: number;
    title?: string;

    constructor(data?: IServiceUnitDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.title = _data["title"];
        }
    }

    static fromJS(data: any): ServiceUnitDto {
        data = typeof data === 'object' ? data : {};
        let result = new ServiceUnitDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["title"] = this.title;
        return data;
    }
}

export interface IServiceUnitDto {
    id?: number;
    title?: string;
}

export class CreateCasePaymentAgreementCommand implements ICreateCasePaymentAgreementCommand {
    caseId?: number;
    paymentTypeId?: number | undefined;
    paymentMethodScheduleId?: number | undefined;
    hearingStageId?: number | undefined;
    paymentCost?: string | undefined;
    title?: string | undefined;
    description?: string | undefined;
    dueDate?: string | undefined;

    constructor(data?: ICreateCasePaymentAgreementCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.caseId = _data["caseId"];
            this.paymentTypeId = _data["paymentTypeId"];
            this.paymentMethodScheduleId = _data["paymentMethodScheduleId"];
            this.hearingStageId = _data["hearingStageId"];
            this.paymentCost = _data["paymentCost"];
            this.title = _data["title"];
            this.description = _data["description"];
            this.dueDate = _data["dueDate"];
        }
    }

    static fromJS(data: any): CreateCasePaymentAgreementCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateCasePaymentAgreementCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["caseId"] = this.caseId;
        data["paymentTypeId"] = this.paymentTypeId;
        data["paymentMethodScheduleId"] = this.paymentMethodScheduleId;
        data["hearingStageId"] = this.hearingStageId;
        data["paymentCost"] = this.paymentCost;
        data["title"] = this.title;
        data["description"] = this.description;
        data["dueDate"] = this.dueDate;
        return data;
    }
}

export interface ICreateCasePaymentAgreementCommand {
    caseId?: number;
    paymentTypeId?: number | undefined;
    paymentMethodScheduleId?: number | undefined;
    hearingStageId?: number | undefined;
    paymentCost?: string | undefined;
    title?: string | undefined;
    description?: string | undefined;
    dueDate?: string | undefined;
}

export class UpdateCasePaymentAgreementCommand implements IUpdateCasePaymentAgreementCommand {
    id?: number;
    paymentTypeId?: number | undefined;
    paymentMethodScheduleId?: number | undefined;
    hearingStageId?: number | undefined;
    paymentCost?: string | undefined;
    title?: string | undefined;
    description?: string | undefined;
    dueDate?: string | undefined;

    constructor(data?: IUpdateCasePaymentAgreementCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.paymentTypeId = _data["paymentTypeId"];
            this.paymentMethodScheduleId = _data["paymentMethodScheduleId"];
            this.hearingStageId = _data["hearingStageId"];
            this.paymentCost = _data["paymentCost"];
            this.title = _data["title"];
            this.description = _data["description"];
            this.dueDate = _data["dueDate"];
        }
    }

    static fromJS(data: any): UpdateCasePaymentAgreementCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateCasePaymentAgreementCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["paymentTypeId"] = this.paymentTypeId;
        data["paymentMethodScheduleId"] = this.paymentMethodScheduleId;
        data["hearingStageId"] = this.hearingStageId;
        data["paymentCost"] = this.paymentCost;
        data["title"] = this.title;
        data["description"] = this.description;
        data["dueDate"] = this.dueDate;
        return data;
    }
}

export interface IUpdateCasePaymentAgreementCommand {
    id?: number;
    paymentTypeId?: number | undefined;
    paymentMethodScheduleId?: number | undefined;
    hearingStageId?: number | undefined;
    paymentCost?: string | undefined;
    title?: string | undefined;
    description?: string | undefined;
    dueDate?: string | undefined;
}

export class DeleteCasePaymentAgreementCommand implements IDeleteCasePaymentAgreementCommand {
    id?: number;

    constructor(data?: IDeleteCasePaymentAgreementCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): DeleteCasePaymentAgreementCommand {
        data = typeof data === 'object' ? data : {};
        let result = new DeleteCasePaymentAgreementCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        return data;
    }
}

export interface IDeleteCasePaymentAgreementCommand {
    id?: number;
}

export class CasePayAgreeVm implements ICasePayAgreeVm {
    casePayAgrees?: CasePayAgreeDto[];
    totalServiceCost?: string | undefined;

    constructor(data?: ICasePayAgreeVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["casePayAgrees"])) {
                this.casePayAgrees = [] as any;
                for (let item of _data["casePayAgrees"])
                    this.casePayAgrees!.push(CasePayAgreeDto.fromJS(item));
            }
            this.totalServiceCost = _data["totalServiceCost"];
        }
    }

    static fromJS(data: any): CasePayAgreeVm {
        data = typeof data === 'object' ? data : {};
        let result = new CasePayAgreeVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.casePayAgrees)) {
            data["casePayAgrees"] = [];
            for (let item of this.casePayAgrees)
                data["casePayAgrees"].push(item.toJSON());
        }
        data["totalServiceCost"] = this.totalServiceCost;
        return data;
    }
}

export interface ICasePayAgreeVm {
    casePayAgrees?: CasePayAgreeDto[];
    totalServiceCost?: string | undefined;
}

export class CasePayAgreeDto implements ICasePayAgreeDto {
    id?: number;
    caseId?: number;
    paymentType?: PaymentTypeDto | undefined;
    paymentMethodSchedule?: PaymentMethodScheduleDto | undefined;
    hearingStage?: HearingStageDto | undefined;
    paymentCost?: string | undefined;
    title?: string | undefined;
    description?: string | undefined;
    dueDate?: string | undefined;

    constructor(data?: ICasePayAgreeDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.caseId = _data["caseId"];
            this.paymentType = _data["paymentType"] ? PaymentTypeDto.fromJS(_data["paymentType"]) : <any>undefined;
            this.paymentMethodSchedule = _data["paymentMethodSchedule"] ? PaymentMethodScheduleDto.fromJS(_data["paymentMethodSchedule"]) : <any>undefined;
            this.hearingStage = _data["hearingStage"] ? HearingStageDto.fromJS(_data["hearingStage"]) : <any>undefined;
            this.paymentCost = _data["paymentCost"];
            this.title = _data["title"];
            this.description = _data["description"];
            this.dueDate = _data["dueDate"];
        }
    }

    static fromJS(data: any): CasePayAgreeDto {
        data = typeof data === 'object' ? data : {};
        let result = new CasePayAgreeDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["caseId"] = this.caseId;
        data["paymentType"] = this.paymentType ? this.paymentType.toJSON() : <any>undefined;
        data["paymentMethodSchedule"] = this.paymentMethodSchedule ? this.paymentMethodSchedule.toJSON() : <any>undefined;
        data["hearingStage"] = this.hearingStage ? this.hearingStage.toJSON() : <any>undefined;
        data["paymentCost"] = this.paymentCost;
        data["title"] = this.title;
        data["description"] = this.description;
        data["dueDate"] = this.dueDate;
        return data;
    }
}

export interface ICasePayAgreeDto {
    id?: number;
    caseId?: number;
    paymentType?: PaymentTypeDto | undefined;
    paymentMethodSchedule?: PaymentMethodScheduleDto | undefined;
    hearingStage?: HearingStageDto | undefined;
    paymentCost?: string | undefined;
    title?: string | undefined;
    description?: string | undefined;
    dueDate?: string | undefined;
}

export class PaymentTypeDto implements IPaymentTypeDto {
    id?: number;
    title?: string;

    constructor(data?: IPaymentTypeDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.title = _data["title"];
        }
    }

    static fromJS(data: any): PaymentTypeDto {
        data = typeof data === 'object' ? data : {};
        let result = new PaymentTypeDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["title"] = this.title;
        return data;
    }
}

export interface IPaymentTypeDto {
    id?: number;
    title?: string;
}

export class PaymentMethodScheduleDto implements IPaymentMethodScheduleDto {
    id?: number;
    title?: string;

    constructor(data?: IPaymentMethodScheduleDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.title = _data["title"];
        }
    }

    static fromJS(data: any): PaymentMethodScheduleDto {
        data = typeof data === 'object' ? data : {};
        let result = new PaymentMethodScheduleDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["title"] = this.title;
        return data;
    }
}

export interface IPaymentMethodScheduleDto {
    id?: number;
    title?: string;
}

export class HearingStageDto implements IHearingStageDto {
    id?: number;
    name?: string;
    caseTypeId?: number;
    courtTypeId?: number;

    constructor(data?: IHearingStageDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.caseTypeId = _data["caseTypeId"];
            this.courtTypeId = _data["courtTypeId"];
        }
    }

    static fromJS(data: any): HearingStageDto {
        data = typeof data === 'object' ? data : {};
        let result = new HearingStageDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["caseTypeId"] = this.caseTypeId;
        data["courtTypeId"] = this.courtTypeId;
        return data;
    }
}

export interface IHearingStageDto {
    id?: number;
    name?: string;
    caseTypeId?: number;
    courtTypeId?: number;
}

export class InitialCasePayAgreesRegDataVM implements IInitialCasePayAgreesRegDataVM {
    paymentTypes?: PaymentTypeDto[];
    paymentMethodSchedules?: PaymentMethodScheduleDto[];
    hearingStages?: HearingStageDto[];

    constructor(data?: IInitialCasePayAgreesRegDataVM) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["paymentTypes"])) {
                this.paymentTypes = [] as any;
                for (let item of _data["paymentTypes"])
                    this.paymentTypes!.push(PaymentTypeDto.fromJS(item));
            }
            if (Array.isArray(_data["paymentMethodSchedules"])) {
                this.paymentMethodSchedules = [] as any;
                for (let item of _data["paymentMethodSchedules"])
                    this.paymentMethodSchedules!.push(PaymentMethodScheduleDto.fromJS(item));
            }
            if (Array.isArray(_data["hearingStages"])) {
                this.hearingStages = [] as any;
                for (let item of _data["hearingStages"])
                    this.hearingStages!.push(HearingStageDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): InitialCasePayAgreesRegDataVM {
        data = typeof data === 'object' ? data : {};
        let result = new InitialCasePayAgreesRegDataVM();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.paymentTypes)) {
            data["paymentTypes"] = [];
            for (let item of this.paymentTypes)
                data["paymentTypes"].push(item.toJSON());
        }
        if (Array.isArray(this.paymentMethodSchedules)) {
            data["paymentMethodSchedules"] = [];
            for (let item of this.paymentMethodSchedules)
                data["paymentMethodSchedules"].push(item.toJSON());
        }
        if (Array.isArray(this.hearingStages)) {
            data["hearingStages"] = [];
            for (let item of this.hearingStages)
                data["hearingStages"].push(item.toJSON());
        }
        return data;
    }
}

export interface IInitialCasePayAgreesRegDataVM {
    paymentTypes?: PaymentTypeDto[];
    paymentMethodSchedules?: PaymentMethodScheduleDto[];
    hearingStages?: HearingStageDto[];
}

export class CreateCasePaymentTransactionCommand implements ICreateCasePaymentTransactionCommand {
    caseId?: number;
    payDate?: string | undefined;
    payCost?: string | undefined;
    paymentMethodOptionId?: number;
    casePayAgreeDetailId?: number | undefined;
    receiverName?: string | undefined;
    receiptNumber?: string | undefined;
    bankAccountId?: number | undefined;
    checkOwner?: string | undefined;
    checkNumber?: string | undefined;
    checkBankBranch?: string | undefined;
    bankId?: number | undefined;
    description?: string | undefined;

    constructor(data?: ICreateCasePaymentTransactionCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.caseId = _data["caseId"];
            this.payDate = _data["payDate"];
            this.payCost = _data["payCost"];
            this.paymentMethodOptionId = _data["paymentMethodOptionId"];
            this.casePayAgreeDetailId = _data["casePayAgreeDetailId"];
            this.receiverName = _data["receiverName"];
            this.receiptNumber = _data["receiptNumber"];
            this.bankAccountId = _data["bankAccountId"];
            this.checkOwner = _data["checkOwner"];
            this.checkNumber = _data["checkNumber"];
            this.checkBankBranch = _data["checkBankBranch"];
            this.bankId = _data["bankId"];
            this.description = _data["description"];
        }
    }

    static fromJS(data: any): CreateCasePaymentTransactionCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateCasePaymentTransactionCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["caseId"] = this.caseId;
        data["payDate"] = this.payDate;
        data["payCost"] = this.payCost;
        data["paymentMethodOptionId"] = this.paymentMethodOptionId;
        data["casePayAgreeDetailId"] = this.casePayAgreeDetailId;
        data["receiverName"] = this.receiverName;
        data["receiptNumber"] = this.receiptNumber;
        data["bankAccountId"] = this.bankAccountId;
        data["checkOwner"] = this.checkOwner;
        data["checkNumber"] = this.checkNumber;
        data["checkBankBranch"] = this.checkBankBranch;
        data["bankId"] = this.bankId;
        data["description"] = this.description;
        return data;
    }
}

export interface ICreateCasePaymentTransactionCommand {
    caseId?: number;
    payDate?: string | undefined;
    payCost?: string | undefined;
    paymentMethodOptionId?: number;
    casePayAgreeDetailId?: number | undefined;
    receiverName?: string | undefined;
    receiptNumber?: string | undefined;
    bankAccountId?: number | undefined;
    checkOwner?: string | undefined;
    checkNumber?: string | undefined;
    checkBankBranch?: string | undefined;
    bankId?: number | undefined;
    description?: string | undefined;
}

export class UpdateCasePaymentTransactionCommand implements IUpdateCasePaymentTransactionCommand {
    id?: number;
    caseId?: number | undefined;
    payDate?: string | undefined;
    payCost?: string | undefined;
    paymentMethodOptionId?: number;
    casePayAgreeDetailId?: number | undefined;
    receiverName?: string | undefined;
    receiptNumber?: string | undefined;
    bankAccountId?: number | undefined;
    checkOwner?: string | undefined;
    checkNumber?: string | undefined;
    checkBankBranch?: string | undefined;
    bankId?: number | undefined;
    description?: string | undefined;

    constructor(data?: IUpdateCasePaymentTransactionCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.caseId = _data["caseId"];
            this.payDate = _data["payDate"];
            this.payCost = _data["payCost"];
            this.paymentMethodOptionId = _data["paymentMethodOptionId"];
            this.casePayAgreeDetailId = _data["casePayAgreeDetailId"];
            this.receiverName = _data["receiverName"];
            this.receiptNumber = _data["receiptNumber"];
            this.bankAccountId = _data["bankAccountId"];
            this.checkOwner = _data["checkOwner"];
            this.checkNumber = _data["checkNumber"];
            this.checkBankBranch = _data["checkBankBranch"];
            this.bankId = _data["bankId"];
            this.description = _data["description"];
        }
    }

    static fromJS(data: any): UpdateCasePaymentTransactionCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateCasePaymentTransactionCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["caseId"] = this.caseId;
        data["payDate"] = this.payDate;
        data["payCost"] = this.payCost;
        data["paymentMethodOptionId"] = this.paymentMethodOptionId;
        data["casePayAgreeDetailId"] = this.casePayAgreeDetailId;
        data["receiverName"] = this.receiverName;
        data["receiptNumber"] = this.receiptNumber;
        data["bankAccountId"] = this.bankAccountId;
        data["checkOwner"] = this.checkOwner;
        data["checkNumber"] = this.checkNumber;
        data["checkBankBranch"] = this.checkBankBranch;
        data["bankId"] = this.bankId;
        data["description"] = this.description;
        return data;
    }
}

export interface IUpdateCasePaymentTransactionCommand {
    id?: number;
    caseId?: number | undefined;
    payDate?: string | undefined;
    payCost?: string | undefined;
    paymentMethodOptionId?: number;
    casePayAgreeDetailId?: number | undefined;
    receiverName?: string | undefined;
    receiptNumber?: string | undefined;
    bankAccountId?: number | undefined;
    checkOwner?: string | undefined;
    checkNumber?: string | undefined;
    checkBankBranch?: string | undefined;
    bankId?: number | undefined;
    description?: string | undefined;
}

export class DeleteCasePaymentTransactionCommand implements IDeleteCasePaymentTransactionCommand {
    id?: number;

    constructor(data?: IDeleteCasePaymentTransactionCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): DeleteCasePaymentTransactionCommand {
        data = typeof data === 'object' ? data : {};
        let result = new DeleteCasePaymentTransactionCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        return data;
    }
}

export interface IDeleteCasePaymentTransactionCommand {
    id?: number;
}

export class CasePayTransactionsVm implements ICasePayTransactionsVm {
    casePayTransactions?: CasePayTnxDto[];

    constructor(data?: ICasePayTransactionsVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["casePayTransactions"])) {
                this.casePayTransactions = [] as any;
                for (let item of _data["casePayTransactions"])
                    this.casePayTransactions!.push(CasePayTnxDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CasePayTransactionsVm {
        data = typeof data === 'object' ? data : {};
        let result = new CasePayTransactionsVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.casePayTransactions)) {
            data["casePayTransactions"] = [];
            for (let item of this.casePayTransactions)
                data["casePayTransactions"].push(item.toJSON());
        }
        return data;
    }
}

export interface ICasePayTransactionsVm {
    casePayTransactions?: CasePayTnxDto[];
}

export class CasePayTnxDto implements ICasePayTnxDto {
    id?: number;
    caseId?: number;
    payDate?: string | undefined;
    payCost?: string | undefined;
    paymentMethodOption?: PaymentMethodOptionDto | undefined;
    casePayAgreeShort?: CasePayAgreeShortDto | undefined;
    payOptionCash?: PayOptionCashDto | undefined;
    payOptionCheck?: PayOptionCheckDto | undefined;
    payOptionDeposit?: PayOptionDepositDto | undefined;
    payOptionOther?: PayOptionOtherDto | undefined;

    constructor(data?: ICasePayTnxDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.caseId = _data["caseId"];
            this.payDate = _data["payDate"];
            this.payCost = _data["payCost"];
            this.paymentMethodOption = _data["paymentMethodOption"] ? PaymentMethodOptionDto.fromJS(_data["paymentMethodOption"]) : <any>undefined;
            this.casePayAgreeShort = _data["casePayAgreeShort"] ? CasePayAgreeShortDto.fromJS(_data["casePayAgreeShort"]) : <any>undefined;
            this.payOptionCash = _data["payOptionCash"] ? PayOptionCashDto.fromJS(_data["payOptionCash"]) : <any>undefined;
            this.payOptionCheck = _data["payOptionCheck"] ? PayOptionCheckDto.fromJS(_data["payOptionCheck"]) : <any>undefined;
            this.payOptionDeposit = _data["payOptionDeposit"] ? PayOptionDepositDto.fromJS(_data["payOptionDeposit"]) : <any>undefined;
            this.payOptionOther = _data["payOptionOther"] ? PayOptionOtherDto.fromJS(_data["payOptionOther"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CasePayTnxDto {
        data = typeof data === 'object' ? data : {};
        let result = new CasePayTnxDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["caseId"] = this.caseId;
        data["payDate"] = this.payDate;
        data["payCost"] = this.payCost;
        data["paymentMethodOption"] = this.paymentMethodOption ? this.paymentMethodOption.toJSON() : <any>undefined;
        data["casePayAgreeShort"] = this.casePayAgreeShort ? this.casePayAgreeShort.toJSON() : <any>undefined;
        data["payOptionCash"] = this.payOptionCash ? this.payOptionCash.toJSON() : <any>undefined;
        data["payOptionCheck"] = this.payOptionCheck ? this.payOptionCheck.toJSON() : <any>undefined;
        data["payOptionDeposit"] = this.payOptionDeposit ? this.payOptionDeposit.toJSON() : <any>undefined;
        data["payOptionOther"] = this.payOptionOther ? this.payOptionOther.toJSON() : <any>undefined;
        return data;
    }
}

export interface ICasePayTnxDto {
    id?: number;
    caseId?: number;
    payDate?: string | undefined;
    payCost?: string | undefined;
    paymentMethodOption?: PaymentMethodOptionDto | undefined;
    casePayAgreeShort?: CasePayAgreeShortDto | undefined;
    payOptionCash?: PayOptionCashDto | undefined;
    payOptionCheck?: PayOptionCheckDto | undefined;
    payOptionDeposit?: PayOptionDepositDto | undefined;
    payOptionOther?: PayOptionOtherDto | undefined;
}

export class PaymentMethodOptionDto implements IPaymentMethodOptionDto {
    id?: number;
    title?: string;

    constructor(data?: IPaymentMethodOptionDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.title = _data["title"];
        }
    }

    static fromJS(data: any): PaymentMethodOptionDto {
        data = typeof data === 'object' ? data : {};
        let result = new PaymentMethodOptionDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["title"] = this.title;
        return data;
    }
}

export interface IPaymentMethodOptionDto {
    id?: number;
    title?: string;
}

export class CasePayAgreeShortDto implements ICasePayAgreeShortDto {
    id?: number;
    title?: string;

    constructor(data?: ICasePayAgreeShortDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.title = _data["title"];
        }
    }

    static fromJS(data: any): CasePayAgreeShortDto {
        data = typeof data === 'object' ? data : {};
        let result = new CasePayAgreeShortDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["title"] = this.title;
        return data;
    }
}

export interface ICasePayAgreeShortDto {
    id?: number;
    title?: string;
}

export class PayOptionCashDto implements IPayOptionCashDto {
    receiverName?: string | undefined;

    constructor(data?: IPayOptionCashDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.receiverName = _data["receiverName"];
        }
    }

    static fromJS(data: any): PayOptionCashDto {
        data = typeof data === 'object' ? data : {};
        let result = new PayOptionCashDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["receiverName"] = this.receiverName;
        return data;
    }
}

export interface IPayOptionCashDto {
    receiverName?: string | undefined;
}

export class PayOptionCheckDto implements IPayOptionCheckDto {
    checkOwner?: string | undefined;
    checkNumber?: string | undefined;
    checkBankBranch?: string | undefined;
    bankId?: number | undefined;
    bankName?: string | undefined;

    constructor(data?: IPayOptionCheckDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.checkOwner = _data["checkOwner"];
            this.checkNumber = _data["checkNumber"];
            this.checkBankBranch = _data["checkBankBranch"];
            this.bankId = _data["bankId"];
            this.bankName = _data["bankName"];
        }
    }

    static fromJS(data: any): PayOptionCheckDto {
        data = typeof data === 'object' ? data : {};
        let result = new PayOptionCheckDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["checkOwner"] = this.checkOwner;
        data["checkNumber"] = this.checkNumber;
        data["checkBankBranch"] = this.checkBankBranch;
        data["bankId"] = this.bankId;
        data["bankName"] = this.bankName;
        return data;
    }
}

export interface IPayOptionCheckDto {
    checkOwner?: string | undefined;
    checkNumber?: string | undefined;
    checkBankBranch?: string | undefined;
    bankId?: number | undefined;
    bankName?: string | undefined;
}

export class PayOptionDepositDto implements IPayOptionDepositDto {
    receiptNumber?: string | undefined;
    bankAccountId?: number | undefined;
    bankAccountTitle?: string | undefined;

    constructor(data?: IPayOptionDepositDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.receiptNumber = _data["receiptNumber"];
            this.bankAccountId = _data["bankAccountId"];
            this.bankAccountTitle = _data["bankAccountTitle"];
        }
    }

    static fromJS(data: any): PayOptionDepositDto {
        data = typeof data === 'object' ? data : {};
        let result = new PayOptionDepositDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["receiptNumber"] = this.receiptNumber;
        data["bankAccountId"] = this.bankAccountId;
        data["bankAccountTitle"] = this.bankAccountTitle;
        return data;
    }
}

export interface IPayOptionDepositDto {
    receiptNumber?: string | undefined;
    bankAccountId?: number | undefined;
    bankAccountTitle?: string | undefined;
}

export class PayOptionOtherDto implements IPayOptionOtherDto {
    description?: string | undefined;

    constructor(data?: IPayOptionOtherDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.description = _data["description"];
        }
    }

    static fromJS(data: any): PayOptionOtherDto {
        data = typeof data === 'object' ? data : {};
        let result = new PayOptionOtherDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["description"] = this.description;
        return data;
    }
}

export interface IPayOptionOtherDto {
    description?: string | undefined;
}

export class InitialCasePayTnxsRegDataVM implements IInitialCasePayTnxsRegDataVM {
    casePayAgreeShorts?: CasePayAgreeShortDto[];
    paymentMethodOptions?: PaymentMethodOptionDto[];
    banks?: BankDto[];
    bankBranchs?: BankBranchDto[];
    bankAccounts?: BankAccountDto[];

    constructor(data?: IInitialCasePayTnxsRegDataVM) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["casePayAgreeShorts"])) {
                this.casePayAgreeShorts = [] as any;
                for (let item of _data["casePayAgreeShorts"])
                    this.casePayAgreeShorts!.push(CasePayAgreeShortDto.fromJS(item));
            }
            if (Array.isArray(_data["paymentMethodOptions"])) {
                this.paymentMethodOptions = [] as any;
                for (let item of _data["paymentMethodOptions"])
                    this.paymentMethodOptions!.push(PaymentMethodOptionDto.fromJS(item));
            }
            if (Array.isArray(_data["banks"])) {
                this.banks = [] as any;
                for (let item of _data["banks"])
                    this.banks!.push(BankDto.fromJS(item));
            }
            if (Array.isArray(_data["bankBranchs"])) {
                this.bankBranchs = [] as any;
                for (let item of _data["bankBranchs"])
                    this.bankBranchs!.push(BankBranchDto.fromJS(item));
            }
            if (Array.isArray(_data["bankAccounts"])) {
                this.bankAccounts = [] as any;
                for (let item of _data["bankAccounts"])
                    this.bankAccounts!.push(BankAccountDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): InitialCasePayTnxsRegDataVM {
        data = typeof data === 'object' ? data : {};
        let result = new InitialCasePayTnxsRegDataVM();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.casePayAgreeShorts)) {
            data["casePayAgreeShorts"] = [];
            for (let item of this.casePayAgreeShorts)
                data["casePayAgreeShorts"].push(item.toJSON());
        }
        if (Array.isArray(this.paymentMethodOptions)) {
            data["paymentMethodOptions"] = [];
            for (let item of this.paymentMethodOptions)
                data["paymentMethodOptions"].push(item.toJSON());
        }
        if (Array.isArray(this.banks)) {
            data["banks"] = [];
            for (let item of this.banks)
                data["banks"].push(item.toJSON());
        }
        if (Array.isArray(this.bankBranchs)) {
            data["bankBranchs"] = [];
            for (let item of this.bankBranchs)
                data["bankBranchs"].push(item.toJSON());
        }
        if (Array.isArray(this.bankAccounts)) {
            data["bankAccounts"] = [];
            for (let item of this.bankAccounts)
                data["bankAccounts"].push(item.toJSON());
        }
        return data;
    }
}

export interface IInitialCasePayTnxsRegDataVM {
    casePayAgreeShorts?: CasePayAgreeShortDto[];
    paymentMethodOptions?: PaymentMethodOptionDto[];
    banks?: BankDto[];
    bankBranchs?: BankBranchDto[];
    bankAccounts?: BankAccountDto[];
}

export class BankDto implements IBankDto {
    id?: number;
    title?: string;

    constructor(data?: IBankDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.title = _data["title"];
        }
    }

    static fromJS(data: any): BankDto {
        data = typeof data === 'object' ? data : {};
        let result = new BankDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["title"] = this.title;
        return data;
    }
}

export interface IBankDto {
    id?: number;
    title?: string;
}

export class BankBranchDto implements IBankBranchDto {
    id?: number;
    title?: string;
    bankId?: number;

    constructor(data?: IBankBranchDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.title = _data["title"];
            this.bankId = _data["bankId"];
        }
    }

    static fromJS(data: any): BankBranchDto {
        data = typeof data === 'object' ? data : {};
        let result = new BankBranchDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["title"] = this.title;
        data["bankId"] = this.bankId;
        return data;
    }
}

export interface IBankBranchDto {
    id?: number;
    title?: string;
    bankId?: number;
}

export class BankAccountDto implements IBankAccountDto {
    id?: number;
    ownerName?: string;
    accountNumber?: string;
    bankBranchId?: number;

    constructor(data?: IBankAccountDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.ownerName = _data["ownerName"];
            this.accountNumber = _data["accountNumber"];
            this.bankBranchId = _data["bankBranchId"];
        }
    }

    static fromJS(data: any): BankAccountDto {
        data = typeof data === 'object' ? data : {};
        let result = new BankAccountDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["ownerName"] = this.ownerName;
        data["accountNumber"] = this.accountNumber;
        data["bankBranchId"] = this.bankBranchId;
        return data;
    }
}

export interface IBankAccountDto {
    id?: number;
    ownerName?: string;
    accountNumber?: string;
    bankBranchId?: number;
}

export class InitialCaseRegistrationDataVM implements IInitialCaseRegistrationDataVM {
    lawyerName?: string | undefined;
    currentDate?: string;
    userRoleInfos?: UserRoleInfoVm[];
    caseStatus?: CaseStatusDto[];
    caseTypes?: CaseTypeDto[];
    hearingStages?: HearingStageDto[];
    predefinedSubjects?: PredefinedSubjectDto[];
    clientRolesInCase?: ClientRoleInCaseDto[];
    judges?: JudgeDto[];
    courtSubtypes?: CourtSubtypeDto[];

    constructor(data?: IInitialCaseRegistrationDataVM) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.lawyerName = _data["lawyerName"];
            this.currentDate = _data["currentDate"];
            if (Array.isArray(_data["userRoleInfos"])) {
                this.userRoleInfos = [] as any;
                for (let item of _data["userRoleInfos"])
                    this.userRoleInfos!.push(UserRoleInfoVm.fromJS(item));
            }
            if (Array.isArray(_data["caseStatus"])) {
                this.caseStatus = [] as any;
                for (let item of _data["caseStatus"])
                    this.caseStatus!.push(CaseStatusDto.fromJS(item));
            }
            if (Array.isArray(_data["caseTypes"])) {
                this.caseTypes = [] as any;
                for (let item of _data["caseTypes"])
                    this.caseTypes!.push(CaseTypeDto.fromJS(item));
            }
            if (Array.isArray(_data["hearingStages"])) {
                this.hearingStages = [] as any;
                for (let item of _data["hearingStages"])
                    this.hearingStages!.push(HearingStageDto.fromJS(item));
            }
            if (Array.isArray(_data["predefinedSubjects"])) {
                this.predefinedSubjects = [] as any;
                for (let item of _data["predefinedSubjects"])
                    this.predefinedSubjects!.push(PredefinedSubjectDto.fromJS(item));
            }
            if (Array.isArray(_data["clientRolesInCase"])) {
                this.clientRolesInCase = [] as any;
                for (let item of _data["clientRolesInCase"])
                    this.clientRolesInCase!.push(ClientRoleInCaseDto.fromJS(item));
            }
            if (Array.isArray(_data["judges"])) {
                this.judges = [] as any;
                for (let item of _data["judges"])
                    this.judges!.push(JudgeDto.fromJS(item));
            }
            if (Array.isArray(_data["courtSubtypes"])) {
                this.courtSubtypes = [] as any;
                for (let item of _data["courtSubtypes"])
                    this.courtSubtypes!.push(CourtSubtypeDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): InitialCaseRegistrationDataVM {
        data = typeof data === 'object' ? data : {};
        let result = new InitialCaseRegistrationDataVM();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["lawyerName"] = this.lawyerName;
        data["currentDate"] = this.currentDate;
        if (Array.isArray(this.userRoleInfos)) {
            data["userRoleInfos"] = [];
            for (let item of this.userRoleInfos)
                data["userRoleInfos"].push(item.toJSON());
        }
        if (Array.isArray(this.caseStatus)) {
            data["caseStatus"] = [];
            for (let item of this.caseStatus)
                data["caseStatus"].push(item.toJSON());
        }
        if (Array.isArray(this.caseTypes)) {
            data["caseTypes"] = [];
            for (let item of this.caseTypes)
                data["caseTypes"].push(item.toJSON());
        }
        if (Array.isArray(this.hearingStages)) {
            data["hearingStages"] = [];
            for (let item of this.hearingStages)
                data["hearingStages"].push(item.toJSON());
        }
        if (Array.isArray(this.predefinedSubjects)) {
            data["predefinedSubjects"] = [];
            for (let item of this.predefinedSubjects)
                data["predefinedSubjects"].push(item.toJSON());
        }
        if (Array.isArray(this.clientRolesInCase)) {
            data["clientRolesInCase"] = [];
            for (let item of this.clientRolesInCase)
                data["clientRolesInCase"].push(item.toJSON());
        }
        if (Array.isArray(this.judges)) {
            data["judges"] = [];
            for (let item of this.judges)
                data["judges"].push(item.toJSON());
        }
        if (Array.isArray(this.courtSubtypes)) {
            data["courtSubtypes"] = [];
            for (let item of this.courtSubtypes)
                data["courtSubtypes"].push(item.toJSON());
        }
        return data;
    }
}

export interface IInitialCaseRegistrationDataVM {
    lawyerName?: string | undefined;
    currentDate?: string;
    userRoleInfos?: UserRoleInfoVm[];
    caseStatus?: CaseStatusDto[];
    caseTypes?: CaseTypeDto[];
    hearingStages?: HearingStageDto[];
    predefinedSubjects?: PredefinedSubjectDto[];
    clientRolesInCase?: ClientRoleInCaseDto[];
    judges?: JudgeDto[];
    courtSubtypes?: CourtSubtypeDto[];
}

export class UserRoleInfoVm implements IUserRoleInfoVm {
    roleId?: string;
    roleName?: string;
    users?: UserBasicDto[];

    constructor(data?: IUserRoleInfoVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.roleId = _data["roleId"];
            this.roleName = _data["roleName"];
            if (Array.isArray(_data["users"])) {
                this.users = [] as any;
                for (let item of _data["users"])
                    this.users!.push(UserBasicDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): UserRoleInfoVm {
        data = typeof data === 'object' ? data : {};
        let result = new UserRoleInfoVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["roleId"] = this.roleId;
        data["roleName"] = this.roleName;
        if (Array.isArray(this.users)) {
            data["users"] = [];
            for (let item of this.users)
                data["users"].push(item.toJSON());
        }
        return data;
    }
}

export interface IUserRoleInfoVm {
    roleId?: string;
    roleName?: string;
    users?: UserBasicDto[];
}

export class CasesVm implements ICasesVm {
    cases?: CaseDto[];

    constructor(data?: ICasesVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["cases"])) {
                this.cases = [] as any;
                for (let item of _data["cases"])
                    this.cases!.push(CaseDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CasesVm {
        data = typeof data === 'object' ? data : {};
        let result = new CasesVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.cases)) {
            data["cases"] = [];
            for (let item of this.cases)
                data["cases"].push(item.toJSON());
        }
        return data;
    }
}

export interface ICasesVm {
    cases?: CaseDto[];
}

export class CaseDto implements ICaseDto {
    lawyer?: UserBasicDto | undefined;
    clients?: UserBasicDto[] | undefined;
    expresses?: UserBasicDto[] | undefined;
    litigants?: UserBasicDto[] | undefined;
    id?: number;
    caseNumber?: string | undefined;
    title?: string | undefined;
    hearingTitle?: string | undefined;
    description?: string | undefined;
    startDate?: string | undefined;
    endDate?: string | undefined;
    caseStatus?: CaseStatusDto | undefined;
    caseType?: CaseTypeDto | undefined;
    clientRoleInCase?: ClientRoleInCaseDto | undefined;
    subjectType?: SubjectType | undefined;
    predefinedSubject?: PredefinedSubjectDto | undefined;
    caseDetails?: CaseDetailsStageDto[] | undefined;
    deadlines?: JudicialDeadlineDto[] | undefined;
    nearestDeadline?: JudicialDeadlineDto | undefined;
    decisions?: JudicialDecisionDto[] | undefined;
    regionId?: number;

    constructor(data?: ICaseDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.lawyer = _data["lawyer"] ? UserBasicDto.fromJS(_data["lawyer"]) : <any>undefined;
            if (Array.isArray(_data["clients"])) {
                this.clients = [] as any;
                for (let item of _data["clients"])
                    this.clients!.push(UserBasicDto.fromJS(item));
            }
            if (Array.isArray(_data["expresses"])) {
                this.expresses = [] as any;
                for (let item of _data["expresses"])
                    this.expresses!.push(UserBasicDto.fromJS(item));
            }
            if (Array.isArray(_data["litigants"])) {
                this.litigants = [] as any;
                for (let item of _data["litigants"])
                    this.litigants!.push(UserBasicDto.fromJS(item));
            }
            this.id = _data["id"];
            this.caseNumber = _data["caseNumber"];
            this.title = _data["title"];
            this.hearingTitle = _data["hearingTitle"];
            this.description = _data["description"];
            this.startDate = _data["startDate"];
            this.endDate = _data["endDate"];
            this.caseStatus = _data["caseStatus"] ? CaseStatusDto.fromJS(_data["caseStatus"]) : <any>undefined;
            this.caseType = _data["caseType"] ? CaseTypeDto.fromJS(_data["caseType"]) : <any>undefined;
            this.clientRoleInCase = _data["clientRoleInCase"] ? ClientRoleInCaseDto.fromJS(_data["clientRoleInCase"]) : <any>undefined;
            this.subjectType = _data["subjectType"];
            this.predefinedSubject = _data["predefinedSubject"] ? PredefinedSubjectDto.fromJS(_data["predefinedSubject"]) : <any>undefined;
            if (Array.isArray(_data["caseDetails"])) {
                this.caseDetails = [] as any;
                for (let item of _data["caseDetails"])
                    this.caseDetails!.push(CaseDetailsStageDto.fromJS(item));
            }
            if (Array.isArray(_data["deadlines"])) {
                this.deadlines = [] as any;
                for (let item of _data["deadlines"])
                    this.deadlines!.push(JudicialDeadlineDto.fromJS(item));
            }
            this.nearestDeadline = _data["nearestDeadline"] ? JudicialDeadlineDto.fromJS(_data["nearestDeadline"]) : <any>undefined;
            if (Array.isArray(_data["decisions"])) {
                this.decisions = [] as any;
                for (let item of _data["decisions"])
                    this.decisions!.push(JudicialDecisionDto.fromJS(item));
            }
            this.regionId = _data["regionId"];
        }
    }

    static fromJS(data: any): CaseDto {
        data = typeof data === 'object' ? data : {};
        let result = new CaseDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["lawyer"] = this.lawyer ? this.lawyer.toJSON() : <any>undefined;
        if (Array.isArray(this.clients)) {
            data["clients"] = [];
            for (let item of this.clients)
                data["clients"].push(item.toJSON());
        }
        if (Array.isArray(this.expresses)) {
            data["expresses"] = [];
            for (let item of this.expresses)
                data["expresses"].push(item.toJSON());
        }
        if (Array.isArray(this.litigants)) {
            data["litigants"] = [];
            for (let item of this.litigants)
                data["litigants"].push(item.toJSON());
        }
        data["id"] = this.id;
        data["caseNumber"] = this.caseNumber;
        data["title"] = this.title;
        data["hearingTitle"] = this.hearingTitle;
        data["description"] = this.description;
        data["startDate"] = this.startDate;
        data["endDate"] = this.endDate;
        data["caseStatus"] = this.caseStatus ? this.caseStatus.toJSON() : <any>undefined;
        data["caseType"] = this.caseType ? this.caseType.toJSON() : <any>undefined;
        data["clientRoleInCase"] = this.clientRoleInCase ? this.clientRoleInCase.toJSON() : <any>undefined;
        data["subjectType"] = this.subjectType;
        data["predefinedSubject"] = this.predefinedSubject ? this.predefinedSubject.toJSON() : <any>undefined;
        if (Array.isArray(this.caseDetails)) {
            data["caseDetails"] = [];
            for (let item of this.caseDetails)
                data["caseDetails"].push(item.toJSON());
        }
        if (Array.isArray(this.deadlines)) {
            data["deadlines"] = [];
            for (let item of this.deadlines)
                data["deadlines"].push(item.toJSON());
        }
        data["nearestDeadline"] = this.nearestDeadline ? this.nearestDeadline.toJSON() : <any>undefined;
        if (Array.isArray(this.decisions)) {
            data["decisions"] = [];
            for (let item of this.decisions)
                data["decisions"].push(item.toJSON());
        }
        data["regionId"] = this.regionId;
        return data;
    }
}

export interface ICaseDto {
    lawyer?: UserBasicDto | undefined;
    clients?: UserBasicDto[] | undefined;
    expresses?: UserBasicDto[] | undefined;
    litigants?: UserBasicDto[] | undefined;
    id?: number;
    caseNumber?: string | undefined;
    title?: string | undefined;
    hearingTitle?: string | undefined;
    description?: string | undefined;
    startDate?: string | undefined;
    endDate?: string | undefined;
    caseStatus?: CaseStatusDto | undefined;
    caseType?: CaseTypeDto | undefined;
    clientRoleInCase?: ClientRoleInCaseDto | undefined;
    subjectType?: SubjectType | undefined;
    predefinedSubject?: PredefinedSubjectDto | undefined;
    caseDetails?: CaseDetailsStageDto[] | undefined;
    deadlines?: JudicialDeadlineDto[] | undefined;
    nearestDeadline?: JudicialDeadlineDto | undefined;
    decisions?: JudicialDecisionDto[] | undefined;
    regionId?: number;
}

export enum SubjectType {
    Free = 0,
    Predefined = 1,
}

export class CaseDetailsStageDto implements ICaseDetailsStageDto {
    judgeId?: number | undefined;
    hearingStageId?: number | undefined;
    courtSubtypeId?: number | undefined;
    archiveNumber?: string | undefined;
    branchHandling?: string | undefined;
    date?: string | undefined;

    constructor(data?: ICaseDetailsStageDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.judgeId = _data["judgeId"];
            this.hearingStageId = _data["hearingStageId"];
            this.courtSubtypeId = _data["courtSubtypeId"];
            this.archiveNumber = _data["archiveNumber"];
            this.branchHandling = _data["branchHandling"];
            this.date = _data["date"];
        }
    }

    static fromJS(data: any): CaseDetailsStageDto {
        data = typeof data === 'object' ? data : {};
        let result = new CaseDetailsStageDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["judgeId"] = this.judgeId;
        data["hearingStageId"] = this.hearingStageId;
        data["courtSubtypeId"] = this.courtSubtypeId;
        data["archiveNumber"] = this.archiveNumber;
        data["branchHandling"] = this.branchHandling;
        data["date"] = this.date;
        return data;
    }
}

export interface ICaseDetailsStageDto {
    judgeId?: number | undefined;
    hearingStageId?: number | undefined;
    courtSubtypeId?: number | undefined;
    archiveNumber?: string | undefined;
    branchHandling?: string | undefined;
    date?: string | undefined;
}

export class JudicialDeadlineDto implements IJudicialDeadlineDto {
    id?: number;
    caseId?: number;
    title?: string | undefined;
    deadlineType?: string | undefined;
    startDate?: string | undefined;
    endDate?: string | undefined;

    constructor(data?: IJudicialDeadlineDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.caseId = _data["caseId"];
            this.title = _data["title"];
            this.deadlineType = _data["deadlineType"];
            this.startDate = _data["startDate"];
            this.endDate = _data["endDate"];
        }
    }

    static fromJS(data: any): JudicialDeadlineDto {
        data = typeof data === 'object' ? data : {};
        let result = new JudicialDeadlineDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["caseId"] = this.caseId;
        data["title"] = this.title;
        data["deadlineType"] = this.deadlineType;
        data["startDate"] = this.startDate;
        data["endDate"] = this.endDate;
        return data;
    }
}

export interface IJudicialDeadlineDto {
    id?: number;
    caseId?: number;
    title?: string | undefined;
    deadlineType?: string | undefined;
    startDate?: string | undefined;
    endDate?: string | undefined;
}

export class JudicialDecisionDto implements IJudicialDecisionDto {
    id?: number;
    caseId?: number;
    title?: string | undefined;
    issuedDate?: string | undefined;
    decisionType?: string | undefined;
    decisionNumber?: string | undefined;
    decisionOutcome?: string | undefined;
    issuingAuthority?: string | undefined;

    constructor(data?: IJudicialDecisionDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.caseId = _data["caseId"];
            this.title = _data["title"];
            this.issuedDate = _data["issuedDate"];
            this.decisionType = _data["decisionType"];
            this.decisionNumber = _data["decisionNumber"];
            this.decisionOutcome = _data["decisionOutcome"];
            this.issuingAuthority = _data["issuingAuthority"];
        }
    }

    static fromJS(data: any): JudicialDecisionDto {
        data = typeof data === 'object' ? data : {};
        let result = new JudicialDecisionDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["caseId"] = this.caseId;
        data["title"] = this.title;
        data["issuedDate"] = this.issuedDate;
        data["decisionType"] = this.decisionType;
        data["decisionNumber"] = this.decisionNumber;
        data["decisionOutcome"] = this.decisionOutcome;
        data["issuingAuthority"] = this.issuingAuthority;
        return data;
    }
}

export interface IJudicialDecisionDto {
    id?: number;
    caseId?: number;
    title?: string | undefined;
    issuedDate?: string | undefined;
    decisionType?: string | undefined;
    decisionNumber?: string | undefined;
    decisionOutcome?: string | undefined;
    issuingAuthority?: string | undefined;
}

export class CreateCaseCommand implements ICreateCaseCommand {
    startDate?: string | undefined;
    caseNumber?: string | undefined;
    caseStatusId?: number | undefined;
    caseTypeId?: number | undefined;
    hearingStageId?: number | undefined;
    clientRoleInCaseId?: number | undefined;
    subjectType?: SubjectType;
    predefinedSubjectId?: number | undefined;
    title?: string | undefined;
    description?: string | undefined;
    clientsId?: string[];
    expressesId?: string[];
    litigantsId?: string[];
    detailsStages?: CaseDetailsStageDto[];

    constructor(data?: ICreateCaseCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.startDate = _data["startDate"];
            this.caseNumber = _data["caseNumber"];
            this.caseStatusId = _data["caseStatusId"];
            this.caseTypeId = _data["caseTypeId"];
            this.hearingStageId = _data["hearingStageId"];
            this.clientRoleInCaseId = _data["clientRoleInCaseId"];
            this.subjectType = _data["subjectType"];
            this.predefinedSubjectId = _data["predefinedSubjectId"];
            this.title = _data["title"];
            this.description = _data["description"];
            if (Array.isArray(_data["clientsId"])) {
                this.clientsId = [] as any;
                for (let item of _data["clientsId"])
                    this.clientsId!.push(item);
            }
            if (Array.isArray(_data["expressesId"])) {
                this.expressesId = [] as any;
                for (let item of _data["expressesId"])
                    this.expressesId!.push(item);
            }
            if (Array.isArray(_data["litigantsId"])) {
                this.litigantsId = [] as any;
                for (let item of _data["litigantsId"])
                    this.litigantsId!.push(item);
            }
            if (Array.isArray(_data["detailsStages"])) {
                this.detailsStages = [] as any;
                for (let item of _data["detailsStages"])
                    this.detailsStages!.push(CaseDetailsStageDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CreateCaseCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateCaseCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["startDate"] = this.startDate;
        data["caseNumber"] = this.caseNumber;
        data["caseStatusId"] = this.caseStatusId;
        data["caseTypeId"] = this.caseTypeId;
        data["hearingStageId"] = this.hearingStageId;
        data["clientRoleInCaseId"] = this.clientRoleInCaseId;
        data["subjectType"] = this.subjectType;
        data["predefinedSubjectId"] = this.predefinedSubjectId;
        data["title"] = this.title;
        data["description"] = this.description;
        if (Array.isArray(this.clientsId)) {
            data["clientsId"] = [];
            for (let item of this.clientsId)
                data["clientsId"].push(item);
        }
        if (Array.isArray(this.expressesId)) {
            data["expressesId"] = [];
            for (let item of this.expressesId)
                data["expressesId"].push(item);
        }
        if (Array.isArray(this.litigantsId)) {
            data["litigantsId"] = [];
            for (let item of this.litigantsId)
                data["litigantsId"].push(item);
        }
        if (Array.isArray(this.detailsStages)) {
            data["detailsStages"] = [];
            for (let item of this.detailsStages)
                data["detailsStages"].push(item.toJSON());
        }
        return data;
    }
}

export interface ICreateCaseCommand {
    startDate?: string | undefined;
    caseNumber?: string | undefined;
    caseStatusId?: number | undefined;
    caseTypeId?: number | undefined;
    hearingStageId?: number | undefined;
    clientRoleInCaseId?: number | undefined;
    subjectType?: SubjectType;
    predefinedSubjectId?: number | undefined;
    title?: string | undefined;
    description?: string | undefined;
    clientsId?: string[];
    expressesId?: string[];
    litigantsId?: string[];
    detailsStages?: CaseDetailsStageDto[];
}

export class UpdateCaseCommand implements IUpdateCaseCommand {
    id?: number;
    caseNumber?: string | undefined;
    caseStatusId?: number | undefined;
    caseTypeId?: number | undefined;
    hearingStageId?: number | undefined;
    clientRoleInCaseId?: number | undefined;
    subjectType?: SubjectType;
    title?: string | undefined;
    predefinedSubjectId?: number | undefined;
    startDate?: string | undefined;
    description?: string | undefined;
    clientsId?: string[];
    expressesId?: string[];
    litigantsId?: string[];
    detailsStages?: CaseDetailsStageDto[];

    constructor(data?: IUpdateCaseCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.caseNumber = _data["caseNumber"];
            this.caseStatusId = _data["caseStatusId"];
            this.caseTypeId = _data["caseTypeId"];
            this.hearingStageId = _data["hearingStageId"];
            this.clientRoleInCaseId = _data["clientRoleInCaseId"];
            this.subjectType = _data["subjectType"];
            this.title = _data["title"];
            this.predefinedSubjectId = _data["predefinedSubjectId"];
            this.startDate = _data["startDate"];
            this.description = _data["description"];
            if (Array.isArray(_data["clientsId"])) {
                this.clientsId = [] as any;
                for (let item of _data["clientsId"])
                    this.clientsId!.push(item);
            }
            if (Array.isArray(_data["expressesId"])) {
                this.expressesId = [] as any;
                for (let item of _data["expressesId"])
                    this.expressesId!.push(item);
            }
            if (Array.isArray(_data["litigantsId"])) {
                this.litigantsId = [] as any;
                for (let item of _data["litigantsId"])
                    this.litigantsId!.push(item);
            }
            if (Array.isArray(_data["detailsStages"])) {
                this.detailsStages = [] as any;
                for (let item of _data["detailsStages"])
                    this.detailsStages!.push(CaseDetailsStageDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): UpdateCaseCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateCaseCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["caseNumber"] = this.caseNumber;
        data["caseStatusId"] = this.caseStatusId;
        data["caseTypeId"] = this.caseTypeId;
        data["hearingStageId"] = this.hearingStageId;
        data["clientRoleInCaseId"] = this.clientRoleInCaseId;
        data["subjectType"] = this.subjectType;
        data["title"] = this.title;
        data["predefinedSubjectId"] = this.predefinedSubjectId;
        data["startDate"] = this.startDate;
        data["description"] = this.description;
        if (Array.isArray(this.clientsId)) {
            data["clientsId"] = [];
            for (let item of this.clientsId)
                data["clientsId"].push(item);
        }
        if (Array.isArray(this.expressesId)) {
            data["expressesId"] = [];
            for (let item of this.expressesId)
                data["expressesId"].push(item);
        }
        if (Array.isArray(this.litigantsId)) {
            data["litigantsId"] = [];
            for (let item of this.litigantsId)
                data["litigantsId"].push(item);
        }
        if (Array.isArray(this.detailsStages)) {
            data["detailsStages"] = [];
            for (let item of this.detailsStages)
                data["detailsStages"].push(item.toJSON());
        }
        return data;
    }
}

export interface IUpdateCaseCommand {
    id?: number;
    caseNumber?: string | undefined;
    caseStatusId?: number | undefined;
    caseTypeId?: number | undefined;
    hearingStageId?: number | undefined;
    clientRoleInCaseId?: number | undefined;
    subjectType?: SubjectType;
    title?: string | undefined;
    predefinedSubjectId?: number | undefined;
    startDate?: string | undefined;
    description?: string | undefined;
    clientsId?: string[];
    expressesId?: string[];
    litigantsId?: string[];
    detailsStages?: CaseDetailsStageDto[];
}

export class DeleteCaseCommand implements IDeleteCaseCommand {
    id?: number;

    constructor(data?: IDeleteCaseCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): DeleteCaseCommand {
        data = typeof data === 'object' ? data : {};
        let result = new DeleteCaseCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        return data;
    }
}

export interface IDeleteCaseCommand {
    id?: number;
}

export class ClientCaseVm implements IClientCaseVm {
    clientCases?: ClientCaseDto[];

    constructor(data?: IClientCaseVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["clientCases"])) {
                this.clientCases = [] as any;
                for (let item of _data["clientCases"])
                    this.clientCases!.push(ClientCaseDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ClientCaseVm {
        data = typeof data === 'object' ? data : {};
        let result = new ClientCaseVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.clientCases)) {
            data["clientCases"] = [];
            for (let item of this.clientCases)
                data["clientCases"].push(item.toJSON());
        }
        return data;
    }
}

export interface IClientCaseVm {
    clientCases?: ClientCaseDto[];
}

export class ClientCaseDto implements IClientCaseDto {
    id?: number;
    caseNumber?: string | undefined;
    title?: string | undefined;
    endDate?: string | undefined;
    caseStatus?: CaseStatusDto | undefined;
    subjectType?: SubjectType | undefined;
    predefinedSubject?: PredefinedSubjectDto | undefined;
    clientRoleInCase?: ClientRoleInCaseDto | undefined;
    nearestDeadline?: JudicialDeadlineDto | undefined;
    caseDetails?: CaseDetailsStageDto | undefined;

    constructor(data?: IClientCaseDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.caseNumber = _data["caseNumber"];
            this.title = _data["title"];
            this.endDate = _data["endDate"];
            this.caseStatus = _data["caseStatus"] ? CaseStatusDto.fromJS(_data["caseStatus"]) : <any>undefined;
            this.subjectType = _data["subjectType"];
            this.predefinedSubject = _data["predefinedSubject"] ? PredefinedSubjectDto.fromJS(_data["predefinedSubject"]) : <any>undefined;
            this.clientRoleInCase = _data["clientRoleInCase"] ? ClientRoleInCaseDto.fromJS(_data["clientRoleInCase"]) : <any>undefined;
            this.nearestDeadline = _data["nearestDeadline"] ? JudicialDeadlineDto.fromJS(_data["nearestDeadline"]) : <any>undefined;
            this.caseDetails = _data["caseDetails"] ? CaseDetailsStageDto.fromJS(_data["caseDetails"]) : <any>undefined;
        }
    }

    static fromJS(data: any): ClientCaseDto {
        data = typeof data === 'object' ? data : {};
        let result = new ClientCaseDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["caseNumber"] = this.caseNumber;
        data["title"] = this.title;
        data["endDate"] = this.endDate;
        data["caseStatus"] = this.caseStatus ? this.caseStatus.toJSON() : <any>undefined;
        data["subjectType"] = this.subjectType;
        data["predefinedSubject"] = this.predefinedSubject ? this.predefinedSubject.toJSON() : <any>undefined;
        data["clientRoleInCase"] = this.clientRoleInCase ? this.clientRoleInCase.toJSON() : <any>undefined;
        data["nearestDeadline"] = this.nearestDeadline ? this.nearestDeadline.toJSON() : <any>undefined;
        data["caseDetails"] = this.caseDetails ? this.caseDetails.toJSON() : <any>undefined;
        return data;
    }
}

export interface IClientCaseDto {
    id?: number;
    caseNumber?: string | undefined;
    title?: string | undefined;
    endDate?: string | undefined;
    caseStatus?: CaseStatusDto | undefined;
    subjectType?: SubjectType | undefined;
    predefinedSubject?: PredefinedSubjectDto | undefined;
    clientRoleInCase?: ClientRoleInCaseDto | undefined;
    nearestDeadline?: JudicialDeadlineDto | undefined;
    caseDetails?: CaseDetailsStageDto | undefined;
}

export class UpdateClientCommand implements IUpdateClientCommand {
    id?: string | undefined;
    firstName?: string;
    lastName?: string;
    email?: string;
    userName?: string;
    password?: string;
    phoneNumber?: string;
    nationalCode?: string;
    roles?: string[];

    constructor(data?: IUpdateClientCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.firstName = _data["firstName"];
            this.lastName = _data["lastName"];
            this.email = _data["email"];
            this.userName = _data["userName"];
            this.password = _data["password"];
            this.phoneNumber = _data["phoneNumber"];
            this.nationalCode = _data["nationalCode"];
            if (Array.isArray(_data["roles"])) {
                this.roles = [] as any;
                for (let item of _data["roles"])
                    this.roles!.push(item);
            }
        }
    }

    static fromJS(data: any): UpdateClientCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateClientCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        data["email"] = this.email;
        data["userName"] = this.userName;
        data["password"] = this.password;
        data["phoneNumber"] = this.phoneNumber;
        data["nationalCode"] = this.nationalCode;
        if (Array.isArray(this.roles)) {
            data["roles"] = [];
            for (let item of this.roles)
                data["roles"].push(item);
        }
        return data;
    }
}

export interface IUpdateClientCommand {
    id?: string | undefined;
    firstName?: string;
    lastName?: string;
    email?: string;
    userName?: string;
    password?: string;
    phoneNumber?: string;
    nationalCode?: string;
    roles?: string[];
}

export class SetFcmTokenCommand implements ISetFcmTokenCommand {
    deviceId?: string | undefined;
    fcmToken?: string | undefined;

    constructor(data?: ISetFcmTokenCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.deviceId = _data["deviceId"];
            this.fcmToken = _data["fcmToken"];
        }
    }

    static fromJS(data: any): SetFcmTokenCommand {
        data = typeof data === 'object' ? data : {};
        let result = new SetFcmTokenCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["deviceId"] = this.deviceId;
        data["fcmToken"] = this.fcmToken;
        return data;
    }
}

export interface ISetFcmTokenCommand {
    deviceId?: string | undefined;
    fcmToken?: string | undefined;
}

export class FileDto implements IFileDto {
    fileId?: string;
    fileName?: string;
    filePath?: string;
    fileSize?: number;
    uploadedDate?: Date;
    area?: string;
    category?: string | undefined;
    uploadedBy?: string | undefined;

    constructor(data?: IFileDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.fileId = _data["fileId"];
            this.fileName = _data["fileName"];
            this.filePath = _data["filePath"];
            this.fileSize = _data["fileSize"];
            this.uploadedDate = _data["uploadedDate"] ? new Date(_data["uploadedDate"].toString()) : <any>undefined;
            this.area = _data["area"];
            this.category = _data["category"];
            this.uploadedBy = _data["uploadedBy"];
        }
    }

    static fromJS(data: any): FileDto {
        data = typeof data === 'object' ? data : {};
        let result = new FileDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["fileId"] = this.fileId;
        data["fileName"] = this.fileName;
        data["filePath"] = this.filePath;
        data["fileSize"] = this.fileSize;
        data["uploadedDate"] = this.uploadedDate ? this.uploadedDate.toISOString() : <any>undefined;
        data["area"] = this.area;
        data["category"] = this.category;
        data["uploadedBy"] = this.uploadedBy;
        return data;
    }
}

export interface IFileDto {
    fileId?: string;
    fileName?: string;
    filePath?: string;
    fileSize?: number;
    uploadedDate?: Date;
    area?: string;
    category?: string | undefined;
    uploadedBy?: string | undefined;
}

export class FileAccessTokenResult implements IFileAccessTokenResult {
    succeeded?: boolean;
    error?: string | undefined;
    accessToken?: string | undefined;
    expiresAt?: Date;

    constructor(data?: IFileAccessTokenResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.succeeded = _data["succeeded"];
            this.error = _data["error"];
            this.accessToken = _data["accessToken"];
            this.expiresAt = _data["expiresAt"] ? new Date(_data["expiresAt"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): FileAccessTokenResult {
        data = typeof data === 'object' ? data : {};
        let result = new FileAccessTokenResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["succeeded"] = this.succeeded;
        data["error"] = this.error;
        data["accessToken"] = this.accessToken;
        data["expiresAt"] = this.expiresAt ? this.expiresAt.toISOString() : <any>undefined;
        return data;
    }
}

export interface IFileAccessTokenResult {
    succeeded?: boolean;
    error?: string | undefined;
    accessToken?: string | undefined;
    expiresAt?: Date;
}

export class CreateJudicialDeadlineCommand implements ICreateJudicialDeadlineCommand {
    caseId?: number;
    deadlineType?: string | undefined;
    startDate?: string | undefined;
    endDate?: string | undefined;
    title?: string | undefined;

    constructor(data?: ICreateJudicialDeadlineCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.caseId = _data["caseId"];
            this.deadlineType = _data["deadlineType"];
            this.startDate = _data["startDate"];
            this.endDate = _data["endDate"];
            this.title = _data["title"];
        }
    }

    static fromJS(data: any): CreateJudicialDeadlineCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateJudicialDeadlineCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["caseId"] = this.caseId;
        data["deadlineType"] = this.deadlineType;
        data["startDate"] = this.startDate;
        data["endDate"] = this.endDate;
        data["title"] = this.title;
        return data;
    }
}

export interface ICreateJudicialDeadlineCommand {
    caseId?: number;
    deadlineType?: string | undefined;
    startDate?: string | undefined;
    endDate?: string | undefined;
    title?: string | undefined;
}

export class UpdateJudicialDeadlineCommand implements IUpdateJudicialDeadlineCommand {
    caseId?: number;
    id?: number;
    deadlineType?: string | undefined;
    startDate?: string | undefined;
    endDate?: string | undefined;
    title?: string | undefined;

    constructor(data?: IUpdateJudicialDeadlineCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.caseId = _data["caseId"];
            this.id = _data["id"];
            this.deadlineType = _data["deadlineType"];
            this.startDate = _data["startDate"];
            this.endDate = _data["endDate"];
            this.title = _data["title"];
        }
    }

    static fromJS(data: any): UpdateJudicialDeadlineCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateJudicialDeadlineCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["caseId"] = this.caseId;
        data["id"] = this.id;
        data["deadlineType"] = this.deadlineType;
        data["startDate"] = this.startDate;
        data["endDate"] = this.endDate;
        data["title"] = this.title;
        return data;
    }
}

export interface IUpdateJudicialDeadlineCommand {
    caseId?: number;
    id?: number;
    deadlineType?: string | undefined;
    startDate?: string | undefined;
    endDate?: string | undefined;
    title?: string | undefined;
}

export class DeleteJudicialDeadlineCommand implements IDeleteJudicialDeadlineCommand {
    caseId?: number;
    id?: number;

    constructor(data?: IDeleteJudicialDeadlineCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.caseId = _data["caseId"];
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): DeleteJudicialDeadlineCommand {
        data = typeof data === 'object' ? data : {};
        let result = new DeleteJudicialDeadlineCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["caseId"] = this.caseId;
        data["id"] = this.id;
        return data;
    }
}

export interface IDeleteJudicialDeadlineCommand {
    caseId?: number;
    id?: number;
}

export class JudicialDeadlineVm implements IJudicialDeadlineVm {
    deadlines?: JudicialDeadlineDto[];

    constructor(data?: IJudicialDeadlineVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["deadlines"])) {
                this.deadlines = [] as any;
                for (let item of _data["deadlines"])
                    this.deadlines!.push(JudicialDeadlineDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): JudicialDeadlineVm {
        data = typeof data === 'object' ? data : {};
        let result = new JudicialDeadlineVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.deadlines)) {
            data["deadlines"] = [];
            for (let item of this.deadlines)
                data["deadlines"].push(item.toJSON());
        }
        return data;
    }
}

export interface IJudicialDeadlineVm {
    deadlines?: JudicialDeadlineDto[];
}

export class JudicialDeadlineWithCaseNoVm implements IJudicialDeadlineWithCaseNoVm {
    deadlines?: JudicialDeadlineWithCaseNoDto[];

    constructor(data?: IJudicialDeadlineWithCaseNoVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["deadlines"])) {
                this.deadlines = [] as any;
                for (let item of _data["deadlines"])
                    this.deadlines!.push(JudicialDeadlineWithCaseNoDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): JudicialDeadlineWithCaseNoVm {
        data = typeof data === 'object' ? data : {};
        let result = new JudicialDeadlineWithCaseNoVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.deadlines)) {
            data["deadlines"] = [];
            for (let item of this.deadlines)
                data["deadlines"].push(item.toJSON());
        }
        return data;
    }
}

export interface IJudicialDeadlineWithCaseNoVm {
    deadlines?: JudicialDeadlineWithCaseNoDto[];
}

export class JudicialDeadlineWithCaseNoDto implements IJudicialDeadlineWithCaseNoDto {
    id?: number;
    caseId?: number;
    title?: string | undefined;
    deadlineType?: string | undefined;
    startDate?: string | undefined;
    endDate?: string | undefined;
    caseNumber?: string | undefined;

    constructor(data?: IJudicialDeadlineWithCaseNoDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.caseId = _data["caseId"];
            this.title = _data["title"];
            this.deadlineType = _data["deadlineType"];
            this.startDate = _data["startDate"];
            this.endDate = _data["endDate"];
            this.caseNumber = _data["caseNumber"];
        }
    }

    static fromJS(data: any): JudicialDeadlineWithCaseNoDto {
        data = typeof data === 'object' ? data : {};
        let result = new JudicialDeadlineWithCaseNoDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["caseId"] = this.caseId;
        data["title"] = this.title;
        data["deadlineType"] = this.deadlineType;
        data["startDate"] = this.startDate;
        data["endDate"] = this.endDate;
        data["caseNumber"] = this.caseNumber;
        return data;
    }
}

export interface IJudicialDeadlineWithCaseNoDto {
    id?: number;
    caseId?: number;
    title?: string | undefined;
    deadlineType?: string | undefined;
    startDate?: string | undefined;
    endDate?: string | undefined;
    caseNumber?: string | undefined;
}

export class CreateJudicialDecisionCommand implements ICreateJudicialDecisionCommand {
    caseId?: number;
    title?: string | undefined;
    issuedDate?: string | undefined;
    decisionType?: string | undefined;
    decisionNumber?: string | undefined;
    decisionOutcome?: string | undefined;
    issuingAuthority?: string | undefined;

    constructor(data?: ICreateJudicialDecisionCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.caseId = _data["caseId"];
            this.title = _data["title"];
            this.issuedDate = _data["issuedDate"];
            this.decisionType = _data["decisionType"];
            this.decisionNumber = _data["decisionNumber"];
            this.decisionOutcome = _data["decisionOutcome"];
            this.issuingAuthority = _data["issuingAuthority"];
        }
    }

    static fromJS(data: any): CreateJudicialDecisionCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateJudicialDecisionCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["caseId"] = this.caseId;
        data["title"] = this.title;
        data["issuedDate"] = this.issuedDate;
        data["decisionType"] = this.decisionType;
        data["decisionNumber"] = this.decisionNumber;
        data["decisionOutcome"] = this.decisionOutcome;
        data["issuingAuthority"] = this.issuingAuthority;
        return data;
    }
}

export interface ICreateJudicialDecisionCommand {
    caseId?: number;
    title?: string | undefined;
    issuedDate?: string | undefined;
    decisionType?: string | undefined;
    decisionNumber?: string | undefined;
    decisionOutcome?: string | undefined;
    issuingAuthority?: string | undefined;
}

export class UpdateJudicialDecisionCommand implements IUpdateJudicialDecisionCommand {
    caseId?: number;
    id?: number;
    title?: string | undefined;
    issuedDate?: string | undefined;
    decisionType?: string | undefined;
    decisionNumber?: string | undefined;
    decisionOutcome?: string | undefined;
    issuingAuthority?: string | undefined;

    constructor(data?: IUpdateJudicialDecisionCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.caseId = _data["caseId"];
            this.id = _data["id"];
            this.title = _data["title"];
            this.issuedDate = _data["issuedDate"];
            this.decisionType = _data["decisionType"];
            this.decisionNumber = _data["decisionNumber"];
            this.decisionOutcome = _data["decisionOutcome"];
            this.issuingAuthority = _data["issuingAuthority"];
        }
    }

    static fromJS(data: any): UpdateJudicialDecisionCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateJudicialDecisionCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["caseId"] = this.caseId;
        data["id"] = this.id;
        data["title"] = this.title;
        data["issuedDate"] = this.issuedDate;
        data["decisionType"] = this.decisionType;
        data["decisionNumber"] = this.decisionNumber;
        data["decisionOutcome"] = this.decisionOutcome;
        data["issuingAuthority"] = this.issuingAuthority;
        return data;
    }
}

export interface IUpdateJudicialDecisionCommand {
    caseId?: number;
    id?: number;
    title?: string | undefined;
    issuedDate?: string | undefined;
    decisionType?: string | undefined;
    decisionNumber?: string | undefined;
    decisionOutcome?: string | undefined;
    issuingAuthority?: string | undefined;
}

export class DeleteJudicialDecisionCommand implements IDeleteJudicialDecisionCommand {
    caseId?: number;
    id?: number;

    constructor(data?: IDeleteJudicialDecisionCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.caseId = _data["caseId"];
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): DeleteJudicialDecisionCommand {
        data = typeof data === 'object' ? data : {};
        let result = new DeleteJudicialDecisionCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["caseId"] = this.caseId;
        data["id"] = this.id;
        return data;
    }
}

export interface IDeleteJudicialDecisionCommand {
    caseId?: number;
    id?: number;
}

export class JudicialDecisionVm implements IJudicialDecisionVm {
    decisions?: JudicialDecisionDto[];

    constructor(data?: IJudicialDecisionVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["decisions"])) {
                this.decisions = [] as any;
                for (let item of _data["decisions"])
                    this.decisions!.push(JudicialDecisionDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): JudicialDecisionVm {
        data = typeof data === 'object' ? data : {};
        let result = new JudicialDecisionVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.decisions)) {
            data["decisions"] = [];
            for (let item of this.decisions)
                data["decisions"].push(item.toJSON());
        }
        return data;
    }
}

export interface IJudicialDecisionVm {
    decisions?: JudicialDecisionDto[];
}

export class CreateJudicialNoticeCommand implements ICreateJudicialNoticeCommand {
    caseId?: number;
    issuedDate?: string | undefined;
    noticeType?: string | undefined;
    noticeNumber?: string | undefined;
    noticeSubject?: string | undefined;
    issuingAuthority?: string | undefined;

    constructor(data?: ICreateJudicialNoticeCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.caseId = _data["caseId"];
            this.issuedDate = _data["issuedDate"];
            this.noticeType = _data["noticeType"];
            this.noticeNumber = _data["noticeNumber"];
            this.noticeSubject = _data["noticeSubject"];
            this.issuingAuthority = _data["issuingAuthority"];
        }
    }

    static fromJS(data: any): CreateJudicialNoticeCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateJudicialNoticeCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["caseId"] = this.caseId;
        data["issuedDate"] = this.issuedDate;
        data["noticeType"] = this.noticeType;
        data["noticeNumber"] = this.noticeNumber;
        data["noticeSubject"] = this.noticeSubject;
        data["issuingAuthority"] = this.issuingAuthority;
        return data;
    }
}

export interface ICreateJudicialNoticeCommand {
    caseId?: number;
    issuedDate?: string | undefined;
    noticeType?: string | undefined;
    noticeNumber?: string | undefined;
    noticeSubject?: string | undefined;
    issuingAuthority?: string | undefined;
}

export class UpdateJudicialNoticeCommand implements IUpdateJudicialNoticeCommand {
    caseId?: number;
    id?: number;
    noticeSubject?: string | undefined;
    issuedDate?: string | undefined;
    noticeType?: string | undefined;
    noticeNumber?: string | undefined;
    issuingAuthority?: string | undefined;

    constructor(data?: IUpdateJudicialNoticeCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.caseId = _data["caseId"];
            this.id = _data["id"];
            this.noticeSubject = _data["noticeSubject"];
            this.issuedDate = _data["issuedDate"];
            this.noticeType = _data["noticeType"];
            this.noticeNumber = _data["noticeNumber"];
            this.issuingAuthority = _data["issuingAuthority"];
        }
    }

    static fromJS(data: any): UpdateJudicialNoticeCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateJudicialNoticeCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["caseId"] = this.caseId;
        data["id"] = this.id;
        data["noticeSubject"] = this.noticeSubject;
        data["issuedDate"] = this.issuedDate;
        data["noticeType"] = this.noticeType;
        data["noticeNumber"] = this.noticeNumber;
        data["issuingAuthority"] = this.issuingAuthority;
        return data;
    }
}

export interface IUpdateJudicialNoticeCommand {
    caseId?: number;
    id?: number;
    noticeSubject?: string | undefined;
    issuedDate?: string | undefined;
    noticeType?: string | undefined;
    noticeNumber?: string | undefined;
    issuingAuthority?: string | undefined;
}

export class DeleteJudicialNoticeCommand implements IDeleteJudicialNoticeCommand {
    caseId?: number;
    id?: number;

    constructor(data?: IDeleteJudicialNoticeCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.caseId = _data["caseId"];
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): DeleteJudicialNoticeCommand {
        data = typeof data === 'object' ? data : {};
        let result = new DeleteJudicialNoticeCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["caseId"] = this.caseId;
        data["id"] = this.id;
        return data;
    }
}

export interface IDeleteJudicialNoticeCommand {
    caseId?: number;
    id?: number;
}

export class JudicialNoticeVm implements IJudicialNoticeVm {
    notices?: JudicialNoticeDto[];

    constructor(data?: IJudicialNoticeVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["notices"])) {
                this.notices = [] as any;
                for (let item of _data["notices"])
                    this.notices!.push(JudicialNoticeDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): JudicialNoticeVm {
        data = typeof data === 'object' ? data : {};
        let result = new JudicialNoticeVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.notices)) {
            data["notices"] = [];
            for (let item of this.notices)
                data["notices"].push(item.toJSON());
        }
        return data;
    }
}

export interface IJudicialNoticeVm {
    notices?: JudicialNoticeDto[];
}

export class JudicialNoticeDto implements IJudicialNoticeDto {
    id?: number;
    caseId?: number;
    noticeNumber?: string | undefined;
    issuedDate?: string | undefined;
    noticeType?: string | undefined;
    noticeSubject?: string | undefined;
    issuingAuthority?: string | undefined;

    constructor(data?: IJudicialNoticeDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.caseId = _data["caseId"];
            this.noticeNumber = _data["noticeNumber"];
            this.issuedDate = _data["issuedDate"];
            this.noticeType = _data["noticeType"];
            this.noticeSubject = _data["noticeSubject"];
            this.issuingAuthority = _data["issuingAuthority"];
        }
    }

    static fromJS(data: any): JudicialNoticeDto {
        data = typeof data === 'object' ? data : {};
        let result = new JudicialNoticeDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["caseId"] = this.caseId;
        data["noticeNumber"] = this.noticeNumber;
        data["issuedDate"] = this.issuedDate;
        data["noticeType"] = this.noticeType;
        data["noticeSubject"] = this.noticeSubject;
        data["issuingAuthority"] = this.issuingAuthority;
        return data;
    }
}

export interface IJudicialNoticeDto {
    id?: number;
    caseId?: number;
    noticeNumber?: string | undefined;
    issuedDate?: string | undefined;
    noticeType?: string | undefined;
    noticeSubject?: string | undefined;
    issuingAuthority?: string | undefined;
}

export class CreateJudicialActionCommand implements ICreateJudicialActionCommand {
    caseId?: number;
    description?: string | undefined;

    constructor(data?: ICreateJudicialActionCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.caseId = _data["caseId"];
            this.description = _data["description"];
        }
    }

    static fromJS(data: any): CreateJudicialActionCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateJudicialActionCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["caseId"] = this.caseId;
        data["description"] = this.description;
        return data;
    }
}

export interface ICreateJudicialActionCommand {
    caseId?: number;
    description?: string | undefined;
}

export class UpdateJudicialActionCommand implements IUpdateJudicialActionCommand {
    caseId?: number;
    id?: number;
    description?: string | undefined;

    constructor(data?: IUpdateJudicialActionCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.caseId = _data["caseId"];
            this.id = _data["id"];
            this.description = _data["description"];
        }
    }

    static fromJS(data: any): UpdateJudicialActionCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateJudicialActionCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["caseId"] = this.caseId;
        data["id"] = this.id;
        data["description"] = this.description;
        return data;
    }
}

export interface IUpdateJudicialActionCommand {
    caseId?: number;
    id?: number;
    description?: string | undefined;
}

export class DeleteJudicialActionCommand implements IDeleteJudicialActionCommand {
    caseId?: number;
    id?: number;

    constructor(data?: IDeleteJudicialActionCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.caseId = _data["caseId"];
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): DeleteJudicialActionCommand {
        data = typeof data === 'object' ? data : {};
        let result = new DeleteJudicialActionCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["caseId"] = this.caseId;
        data["id"] = this.id;
        return data;
    }
}

export interface IDeleteJudicialActionCommand {
    caseId?: number;
    id?: number;
}

export class JudicialActionVm implements IJudicialActionVm {
    actions?: JudicialActionDto[];

    constructor(data?: IJudicialActionVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["actions"])) {
                this.actions = [] as any;
                for (let item of _data["actions"])
                    this.actions!.push(JudicialActionDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): JudicialActionVm {
        data = typeof data === 'object' ? data : {};
        let result = new JudicialActionVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.actions)) {
            data["actions"] = [];
            for (let item of this.actions)
                data["actions"].push(item.toJSON());
        }
        return data;
    }
}

export interface IJudicialActionVm {
    actions?: JudicialActionDto[];
}

export class JudicialActionDto implements IJudicialActionDto {
    id?: number;
    caseId?: number;
    description?: string | undefined;

    constructor(data?: IJudicialActionDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.caseId = _data["caseId"];
            this.description = _data["description"];
        }
    }

    static fromJS(data: any): JudicialActionDto {
        data = typeof data === 'object' ? data : {};
        let result = new JudicialActionDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["caseId"] = this.caseId;
        data["description"] = this.description;
        return data;
    }
}

export interface IJudicialActionDto {
    id?: number;
    caseId?: number;
    description?: string | undefined;
}

export class DeviceRegistrationDto implements IDeviceRegistrationDto {
    deviceToken?: string | undefined;
    deviceType?: string | undefined;

    constructor(data?: IDeviceRegistrationDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.deviceToken = _data["deviceToken"];
            this.deviceType = _data["deviceType"];
        }
    }

    static fromJS(data: any): DeviceRegistrationDto {
        data = typeof data === 'object' ? data : {};
        let result = new DeviceRegistrationDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["deviceToken"] = this.deviceToken;
        data["deviceType"] = this.deviceType;
        return data;
    }
}

export interface IDeviceRegistrationDto {
    deviceToken?: string | undefined;
    deviceType?: string | undefined;
}

export class SendNotificationRequest implements ISendNotificationRequest {
    userId?: string;
    title?: string;
    body?: string;
    data?: { [key: string]: string; };

    constructor(data?: ISendNotificationRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.userId = _data["userId"];
            this.title = _data["title"];
            this.body = _data["body"];
            if (_data["data"]) {
                this.data = {} as any;
                for (let key in _data["data"]) {
                    if (_data["data"].hasOwnProperty(key))
                        (<any>this.data)![key] = _data["data"][key];
                }
            }
        }
    }

    static fromJS(data: any): SendNotificationRequest {
        data = typeof data === 'object' ? data : {};
        let result = new SendNotificationRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId;
        data["title"] = this.title;
        data["body"] = this.body;
        if (this.data) {
            data["data"] = {};
            for (let key in this.data) {
                if (this.data.hasOwnProperty(key))
                    (<any>data["data"])[key] = (<any>this.data)[key];
            }
        }
        return data;
    }
}

export interface ISendNotificationRequest {
    userId?: string;
    title?: string;
    body?: string;
    data?: { [key: string]: string; };
}

export class UpdateUserPreferenceCommand implements IUpdateUserPreferenceCommand {
    key?: string;
    value?: string;

    constructor(data?: IUpdateUserPreferenceCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.key = _data["key"];
            this.value = _data["value"];
        }
    }

    static fromJS(data: any): UpdateUserPreferenceCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateUserPreferenceCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["key"] = this.key;
        data["value"] = this.value;
        return data;
    }
}

export interface IUpdateUserPreferenceCommand {
    key?: string;
    value?: string;
}

export class PaginatedListOfTodoItemBriefDto implements IPaginatedListOfTodoItemBriefDto {
    items?: TodoItemBriefDto[];
    pageNumber?: number;
    totalPages?: number;
    totalCount?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;

    constructor(data?: IPaginatedListOfTodoItemBriefDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(TodoItemBriefDto.fromJS(item));
            }
            this.pageNumber = _data["pageNumber"];
            this.totalPages = _data["totalPages"];
            this.totalCount = _data["totalCount"];
            this.hasPreviousPage = _data["hasPreviousPage"];
            this.hasNextPage = _data["hasNextPage"];
        }
    }

    static fromJS(data: any): PaginatedListOfTodoItemBriefDto {
        data = typeof data === 'object' ? data : {};
        let result = new PaginatedListOfTodoItemBriefDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["pageNumber"] = this.pageNumber;
        data["totalPages"] = this.totalPages;
        data["totalCount"] = this.totalCount;
        data["hasPreviousPage"] = this.hasPreviousPage;
        data["hasNextPage"] = this.hasNextPage;
        return data;
    }
}

export interface IPaginatedListOfTodoItemBriefDto {
    items?: TodoItemBriefDto[];
    pageNumber?: number;
    totalPages?: number;
    totalCount?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;
}

export class TodoItemBriefDto implements ITodoItemBriefDto {
    id?: number;
    listId?: number;
    title?: string | undefined;
    done?: boolean;

    constructor(data?: ITodoItemBriefDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.listId = _data["listId"];
            this.title = _data["title"];
            this.done = _data["done"];
        }
    }

    static fromJS(data: any): TodoItemBriefDto {
        data = typeof data === 'object' ? data : {};
        let result = new TodoItemBriefDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["listId"] = this.listId;
        data["title"] = this.title;
        data["done"] = this.done;
        return data;
    }
}

export interface ITodoItemBriefDto {
    id?: number;
    listId?: number;
    title?: string | undefined;
    done?: boolean;
}

export class CreateTodoItemCommand implements ICreateTodoItemCommand {
    listId?: number;
    title?: string | undefined;

    constructor(data?: ICreateTodoItemCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.listId = _data["listId"];
            this.title = _data["title"];
        }
    }

    static fromJS(data: any): CreateTodoItemCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateTodoItemCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["listId"] = this.listId;
        data["title"] = this.title;
        return data;
    }
}

export interface ICreateTodoItemCommand {
    listId?: number;
    title?: string | undefined;
}

export class UpdateTodoItemCommand implements IUpdateTodoItemCommand {
    id?: number;
    title?: string | undefined;
    done?: boolean;

    constructor(data?: IUpdateTodoItemCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.title = _data["title"];
            this.done = _data["done"];
        }
    }

    static fromJS(data: any): UpdateTodoItemCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateTodoItemCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["title"] = this.title;
        data["done"] = this.done;
        return data;
    }
}

export interface IUpdateTodoItemCommand {
    id?: number;
    title?: string | undefined;
    done?: boolean;
}

export class UpdateTodoItemDetailCommand implements IUpdateTodoItemDetailCommand {
    id?: number;
    listId?: number;
    priority?: PriorityLevel;
    note?: string | undefined;

    constructor(data?: IUpdateTodoItemDetailCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.listId = _data["listId"];
            this.priority = _data["priority"];
            this.note = _data["note"];
        }
    }

    static fromJS(data: any): UpdateTodoItemDetailCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateTodoItemDetailCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["listId"] = this.listId;
        data["priority"] = this.priority;
        data["note"] = this.note;
        return data;
    }
}

export interface IUpdateTodoItemDetailCommand {
    id?: number;
    listId?: number;
    priority?: PriorityLevel;
    note?: string | undefined;
}

export enum PriorityLevel {
    None = 0,
    Low = 1,
    Medium = 2,
    High = 3,
}

export class TodosVm implements ITodosVm {
    priorityLevels?: LookupDto[];
    lists?: TodoListDto[];

    constructor(data?: ITodosVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["priorityLevels"])) {
                this.priorityLevels = [] as any;
                for (let item of _data["priorityLevels"])
                    this.priorityLevels!.push(LookupDto.fromJS(item));
            }
            if (Array.isArray(_data["lists"])) {
                this.lists = [] as any;
                for (let item of _data["lists"])
                    this.lists!.push(TodoListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): TodosVm {
        data = typeof data === 'object' ? data : {};
        let result = new TodosVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.priorityLevels)) {
            data["priorityLevels"] = [];
            for (let item of this.priorityLevels)
                data["priorityLevels"].push(item.toJSON());
        }
        if (Array.isArray(this.lists)) {
            data["lists"] = [];
            for (let item of this.lists)
                data["lists"].push(item.toJSON());
        }
        return data;
    }
}

export interface ITodosVm {
    priorityLevels?: LookupDto[];
    lists?: TodoListDto[];
}

export class LookupDto implements ILookupDto {
    id?: number;
    title?: string | undefined;

    constructor(data?: ILookupDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.title = _data["title"];
        }
    }

    static fromJS(data: any): LookupDto {
        data = typeof data === 'object' ? data : {};
        let result = new LookupDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["title"] = this.title;
        return data;
    }
}

export interface ILookupDto {
    id?: number;
    title?: string | undefined;
}

export class TodoListDto implements ITodoListDto {
    id?: number;
    title?: string | undefined;
    colour?: string | undefined;
    items?: TodoItemDto[];

    constructor(data?: ITodoListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.title = _data["title"];
            this.colour = _data["colour"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(TodoItemDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): TodoListDto {
        data = typeof data === 'object' ? data : {};
        let result = new TodoListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["title"] = this.title;
        data["colour"] = this.colour;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data;
    }
}

export interface ITodoListDto {
    id?: number;
    title?: string | undefined;
    colour?: string | undefined;
    items?: TodoItemDto[];
}

export class TodoItemDto implements ITodoItemDto {
    id?: number;
    listId?: number;
    title?: string | undefined;
    done?: boolean;
    priority?: number;
    note?: string | undefined;

    constructor(data?: ITodoItemDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.listId = _data["listId"];
            this.title = _data["title"];
            this.done = _data["done"];
            this.priority = _data["priority"];
            this.note = _data["note"];
        }
    }

    static fromJS(data: any): TodoItemDto {
        data = typeof data === 'object' ? data : {};
        let result = new TodoItemDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["listId"] = this.listId;
        data["title"] = this.title;
        data["done"] = this.done;
        data["priority"] = this.priority;
        data["note"] = this.note;
        return data;
    }
}

export interface ITodoItemDto {
    id?: number;
    listId?: number;
    title?: string | undefined;
    done?: boolean;
    priority?: number;
    note?: string | undefined;
}

export class CreateTodoListCommand implements ICreateTodoListCommand {
    title?: string | undefined;

    constructor(data?: ICreateTodoListCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.title = _data["title"];
        }
    }

    static fromJS(data: any): CreateTodoListCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateTodoListCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["title"] = this.title;
        return data;
    }
}

export interface ICreateTodoListCommand {
    title?: string | undefined;
}

export class UpdateTodoListCommand implements IUpdateTodoListCommand {
    id?: number;
    title?: string | undefined;

    constructor(data?: IUpdateTodoListCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.title = _data["title"];
        }
    }

    static fromJS(data: any): UpdateTodoListCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateTodoListCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["title"] = this.title;
        return data;
    }
}

export interface IUpdateTodoListCommand {
    id?: number;
    title?: string | undefined;
}

export class WeatherForecast implements IWeatherForecast {
    date?: Date;
    temperatureC?: number;
    temperatureF?: number;
    summary?: string | undefined;

    constructor(data?: IWeatherForecast) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.date = _data["date"] ? new Date(_data["date"].toString()) : <any>undefined;
            this.temperatureC = _data["temperatureC"];
            this.temperatureF = _data["temperatureF"];
            this.summary = _data["summary"];
        }
    }

    static fromJS(data: any): WeatherForecast {
        data = typeof data === 'object' ? data : {};
        let result = new WeatherForecast();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["temperatureC"] = this.temperatureC;
        data["temperatureF"] = this.temperatureF;
        data["summary"] = this.summary;
        return data;
    }
}

export interface IWeatherForecast {
    date?: Date;
    temperatureC?: number;
    temperatureF?: number;
    summary?: string | undefined;
}

export interface FileParameter {
    data: any;
    fileName: string;
}

export class SwaggerException extends Error {
    override message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isSwaggerException = true;

    static isSwaggerException(obj: any): obj is SwaggerException {
        return obj.isSwaggerException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new SwaggerException(message, status, response, headers, null);
}